///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        26/May/2016  16:35:44 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\Administrator\桌面\GW\W /
//                          SN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN_ /
//                          ZigBee\Projects\zstack\Utilities\SerialApp\Source /
//                          \SerialApp.c                                      /
//    Command line       =  -f "C:\Documents and Settings\Administrator\桌面\ /
//                          GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\ /
//                          WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"      /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"        /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\Source\SerialApp.c" -D  /
//                          ZIGBEEPRO -D HAL_UART=TRUE -D SERIAL_APP_PORT=0   /
//                          -D LCD_SUPPORTED -D NV_RESTORE -lC "C:\Documents  /
//                          and Settings\Administrator\桌面\GW\WSN_ZigBee(gat /
//                          eway)0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projec /
//                          ts\zstack\Utilities\SerialApp\CC2530DB\Coordinato /
//                          rEB-Pro\List\" -lA "C:\Documents and              /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\CoordinatorEB- /
//                          Pro\List\" --diag_suppress Pe001,Pa010 -o         /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\CoordinatorEB-Pro\Obj\" -e --debug            /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "C:\Documents and          /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\" -I           /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\SOURCE\" -I "C:\Documents and              /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\ZMAIN /
//                          \TI2530DB\" -I "C:\Documents and                  /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\MT\" -I "C:\Documents and             /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\HAL\INCLUDE\" -I "C:\Documents and    /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\HAL\TARGET\CC2530EB\" -I              /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"    /
//                          -I "C:\Documents and Settings\Administrator\桌面\ /
//                          GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\ /
//                          WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"   /
//                          -I "C:\Documents and Settings\Administrator\桌面\ /
//                          GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\ /
//                          WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" -I    /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I      /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\STACK\SEC\" -I      /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\" -I     /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\STACK\SYS\" -I      /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" -I      /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I       /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I           /
//                          "C:\Documents and Settings\Administrator\桌面\GW\ /
//                          WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN /
//                          _ZigBee\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"    /
//                          -I "C:\Documents and Settings\Administrator\桌面\ /
//                          GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\ /
//                          WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\" /
//                           -I "C:\Documents and Settings\Administrator\桌面 /
//                          \GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway) /
//                          \WSN_ZigBee\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\"   /
//                          -I "C:\Documents and Settings\Administrator\桌面\ /
//                          GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\ /
//                          WSN_ZigBee\Projects\zstack\Utilities\SerialApp\CC /
//                          2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" /
//                           -I "C:\Documents and Settings\Administrator\桌面 /
//                          \GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway) /
//                          \WSN_ZigBee\Projects\zstack\Utilities\SerialApp\C /
//                          C2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\s /
//                          rf04\" -I "C:\Documents and                       /
//                          Settings\Administrator\桌面\GW\WSN_ZigBee(gateway /
//                          )0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\z /
//                          stack\Utilities\SerialApp\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"     /
//                          -Ohz                                              /
//    List file          =  C:\Documents and Settings\Administrator\桌面\GW\W /
//                          SN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN_ /
//                          ZigBee\Projects\zstack\Utilities\SerialApp\CC2530 /
//                          DB\CoordinatorEB-Pro\List\SerialApp.s51           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ADD_XSTACK_DISP0_16
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_16
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Init_Wifi?relay
        FUNCTION ??Init_Wifi?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        FUNCTION ??SerialApp_HandleKeys?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SerialApp_Send?relay,0203H
        FUNCTION ??SerialApp_SendPeriodicMessage?relay,0203H
        FUNCTION ??XorCheckSum?relay,0203H
        PUBLIC ??initUART0?relay
        FUNCTION ??initUART0?relay,0203H
        PUBWEAK CLKCONCMD
        PUBWEAK CLKCONSTA
        PUBLIC Data_Report
        PUBLIC Init_Wifi
        FUNCTION Init_Wifi,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC NodeData
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBLIC Recdata
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SerialApp_ClusterList
        FUNCTION SerialApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION SerialApp_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 44, STACK
        FUNCTION SerialApp_Send,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 539, STACK
        FUNCTION SerialApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        PUBLIC TxBuffer
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0GCR
        FUNCTION XorCheckSum,0203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBLIC adr
        PUBLIC fc
        PUBLIC flag
        PUBLIC initUART0
        FUNCTION initUART0,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC tempRX
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
HalUARTWrite        SYMBOL "HalUARTWrite"
Delay_ms            SYMBOL "Delay_ms"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_set_event      SYMBOL "osal_set_event"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
osal_memcpy         SYMBOL "osal_memcpy"
osal_memset         SYMBOL "osal_memset"
HalUARTRead         SYMBOL "HalUARTRead"
strstr              SYMBOL "strstr"
sscanf              SYMBOL "sscanf"
atoi                SYMBOL "atoi"
DHT11               SYMBOL "DHT11"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??atoi?relay        SYMBOL "?relay", atoi
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sscanf?relay      SYMBOL "?relay", sscanf
??strstr?relay      SYMBOL "?relay", strstr
Init_Wifi           SYMBOL "Init_Wifi"
??Init_Wifi?relay   SYMBOL "?relay", Init_Wifi
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent
initUART0           SYMBOL "initUART0"
??initUART0?relay   SYMBOL "?relay", initUART0

        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Delay_ms
        FUNCTION Delay_ms,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 539, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 533, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sscanf
        FUNCTION sscanf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 534, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atoi
        FUNCTION atoi,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??atoi?relay
        FUNCTION ??atoi?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sscanf?relay
        FUNCTION ??sscanf?relay,00H
        EXTERN ??strstr?relay
        FUNCTION ??strstr?relay,00H
        EXTERN shidu
        EXTERN wendu

// C:\Documents and Settings\Administrator\桌面\GW\WSN_ZigBee(gateway)0517OK\WSN_ZigBee(gateway)\WSN_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /*********************************************************************
//    2 * INCLUDES
//    3 */
//    4 #include <stdio.h>
//    5 #include <string.h>
//    6 #include <stdlib.h>
//    7 
//    8 #include "AF.h"
//    9 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   10 #include "OSAL_Tasks.h"
//   11 #include "SerialApp.h"
//   12 #include "ZDApp.h"
//   13 #include "ZDObject.h"
//   14 #include "ZDProfile.h"
//   15 
//   16 #include "hal_drivers.h"
//   17 #include "hal_key.h"
//   18 #if defined ( LCD_SUPPORTED )
//   19 #include "hal_lcd.h"
//   20 #endif
//   21 #include "hal_led.h"
//   22 #include "hal_uart.h"
//   23 
//   24 #include "DHT11.h"
//   25 #include "nwk_globals.h"
//   26 #include "WIFI.H"
//   27 /*********************************************************************
//   28 * MACROS
//   29 */
//   30 #define COORD_ADDR   0x00
//   31 #define ED_ADDR      0x01
//   32 #define UART0        0x00
//   33 #define MAX_NODE     0x04
//   34 #define UART_DEBUG   0x00        //调试宏,通过串口输出协调器和终端的IEEE、短地址
//   35 #define LAMP_PIN     P0_4        //定义P0.4口为继电器输入端
//   36 #define GAS_PIN      P0_5        //定义P0.5口为烟雾传感器的输入端  
//   37 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   38 
//   39 //---------------------------------------------------------------------
//   40 //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理
//   41 //专业版自动从Flash获得地址，所有终端固件相同，适合量产

        RSEG XDATA_I:XDATA:NOROOT(0)
//   42 static uint16 EndDeviceID = 0x0001; //终端ID，重要
EndDeviceID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for EndDeviceID>`
        REQUIRE __INIT_XDATA_I
//   43 //---------------------------------------------------------------------
//   44 
//   45 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   46 unsigned char tempRX;
tempRX:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   47 //变量
//   48 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   49 unsigned char  Recdata[128];
Recdata:
        DS 128
        REQUIRE __INIT_XDATA_Z
//   50 
//   51 
//   52 /*********************************************************************/
//   53 
//   54 #define STEP1 0x00
//   55 
//   56 #define STEP2 0x01
//   57 
//   58 #define STEP3 0x02
//   59 
//   60 #define STEP4 0x03

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   61 static uint8 tasksteps = STEP1;
tasksteps:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   62 uint8 adr=0x00;
adr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   63 uint8 fc=0x00;
fc:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   64 
//   65 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   66 uint8 Data_Report[30]={0};
Data_Report:
        DS 30
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   67 uint8 flag=0x00;
flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   68 
//   69 /*********************************************************************/
//   70 /* CONSTANTS
//   71 */
//   72 
//   73 #if !defined( SERIAL_APP_PORT )
//   74 #define SERIAL_APP_PORT  0
//   75 #endif
//   76 
//   77 #if !defined( SERIAL_APP_BAUD )
//   78 //#define SERIAL_APP_BAUD  HAL_UART_BR_38400
//   79 #define SERIAL_APP_BAUD  HAL_UART_BR_115200
//   80 #endif
//   81 
//   82 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   83 #if !defined( SERIAL_APP_THRESH )
//   84 #define SERIAL_APP_THRESH  64
//   85 #endif
//   86 
//   87 #if !defined( SERIAL_APP_RX_SZ )
//   88 #define SERIAL_APP_RX_SZ  128
//   89 #endif
//   90 
//   91 #if !defined( SERIAL_APP_TX_SZ )
//   92 #define SERIAL_APP_TX_SZ  128
//   93 #endif
//   94 
//   95 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   96 #if !defined( SERIAL_APP_IDLE )
//   97 #define SERIAL_APP_IDLE  6
//   98 #endif
//   99 
//  100 // Loopback Rx bytes to Tx for throughput testing.
//  101 #if !defined( SERIAL_APP_LOOPBACK )
//  102 #define SERIAL_APP_LOOPBACK  FALSE
//  103 #endif
//  104 
//  105 // This is the max byte count per OTA message.
//  106 #if !defined( SERIAL_APP_TX_MAX )
//  107 //#define SERIAL_APP_TX_MAX  30
//  108 #define SERIAL_APP_TX_MAX  40
//  109 #endif
//  110 
//  111 #define SERIAL_APP_RSP_CNT  4
//  112 
//  113 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//  114 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DATA16
        DW 1
        DW 0
//  115 {
//  116 	SERIALAPP_CLUSTERID
//  117 };
//  118 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  119 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SerialApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SerialApp_ClusterList
//  120 {
//  121 	SERIALAPP_ENDPOINT,              //  int   Endpoint;
//  122     SERIALAPP_PROFID,                //  uint16 AppProfId[2];
//  123     SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  124     SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  125     SERIALAPP_FLAGS,                 //  int   AppFlags:4;
//  126     SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  127     (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
//  128     SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//  129     (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
//  130 };
//  131 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  132 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 11
        DATA16
        DW SerialApp_TaskID
        DW SerialApp_SimpleDesc
        DATA8
        DB 0
//  133 {
//  134 	SERIALAPP_ENDPOINT,
//  135     &SerialApp_TaskID,
//  136     (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
//  137     noLatencyReqs
//  138 };
//  139 
//  140 /*********************************************************************
//  141 * TYPEDEFS
//  142 */
//  143 
//  144 /*********************************************************************
//  145 * GLOBAL VARIABLES
//  146 */
//  147 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  149 
//  150 /*********************************************************************
//  151 * EXTERNAL VARIABLES
//  152 */
//  153 
//  154 /*********************************************************************
//  155 * EXTERNAL FUNCTIONS
//  156 */
//  157 
//  158 /*********************************************************************
//  159 * LOCAL VARIABLES
//  160 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 static bool SendFlag = 0;
SendFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  162 
//  163 static uint8 SerialApp_MsgID;
//  164 
//  165 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 static afAddrType_t Broadcast_DstAddr;
Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  167 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  168 static uint8 SerialApp_TxSeq;
SerialApp_TxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 41
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  171 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  173 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  174 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 static devStates_t SerialApp_NwkState;
SerialApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 static afAddrType_t SerialApp_TxAddr;
SerialApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  177 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 uint8 NodeData[MAX_NODE][5];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯
NodeData:
        DS 20
        REQUIRE __INIT_XDATA_Z
//  180 
//  181 
//  182 
//  183 /*********************************************************************
//  184 * LOCAL FUNCTIONS
//  185 */
//  186 
//  187 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  188 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  189 static void SerialApp_Send(void);
//  190 static void SerialApp_Resp(void);
//  191 static void SerialApp_CallBack(uint8 port, uint8 event);
//  192 
//  193 static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
//  194 static void AfSendAddrInfo(void);
//  195 static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
//  196 static void SerialApp_SendPeriodicMessage( void );
//  197 static uint8 GetDataLen(uint8 fc);
//  198 static uint8 GetLamp( void );
//  199 static uint8 GetGas( void );
//  200 static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
//  201 uint8 SendData(uint8 addr, uint8 FC);
//  202 
//  203 /*********************************************************************
//  204 * @fn      
//  205 *
//  206 * @brief  
//  207 *
//  208 * @param   
//  209 *
//  210 * @return  
//  211 *************************************************************************/
//  212 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  213 void Init_Wifi(void)
Init_Wifi:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Init_Wifi
        CODE
//  214 {
        FUNCALL Init_Wifi, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_Wifi, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Init_Wifi, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  215 
//  216   HalLcdWriteString( "initwifi", HAL_LCD_LINE_2 );      
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "initwifi">` & 0xff
        MOV     R3,#(`?<Constant "initwifi">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  217  
//  218   HalUARTWrite(UART0, "AT+CIPMUX=1\r\n", 12);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  219   Delay_ms(500);
//  220   tasksteps=STEP2;
??CrossCallReturnLabel_0:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  221 
//  222 } 
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  223 
//  224 //初始化串口0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  225 void initUART0(void)
initUART0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function initUART0
        CODE
//  226 {
        ; Saved register size: 0
        ; Auto size: 0
//  227    //串口
//  228       CLKCONCMD &= ~0x40;                         //设置系统时钟源为32MHZ晶振
        ANL     0xc6,#0xbf
//  229       while(CLKCONSTA & 0x40);                    //等待晶振稳定
??initUART0_0:
        MOV     A,0x9e
        MOV     C,0xE0 /* A   */.6
        JC      ??initUART0_0
//  230       CLKCONCMD &= ~0x47;                         //设置系统主时钟频率为32MHZ
        ANL     0xc6,#0xb8
//  231   
//  232       PERCFG = 0x00;	//位置1 P0 口
        MOV     0xf1,#0x0
//  233       P0SEL = 0x0c;	//P0_2,P0_3用作串口（外部设备功能）
        MOV     0xf3,#0xc
//  234       P2DIR &= ~0XC0; //P0优先作为UART0
        ANL     0xff,#0x3f
//  235 
//  236       U0CSR |= 0x80;	//设置为UART方式
        ORL     0x86,#0x80
//  237       
//  238       U0GCR |= 11;
        ORL     0xc5,#0xb
//  239       U0BAUD |= 216;	//波特率设为115200 根据上面表中获得的数据
        ORL     0xc2,#0xd8
//  240       UTX0IF = 1;	//UART0 TX 中断标志初始置位0
        SETB    0xe8.1
//  241 
//  242       U0CSR |= 0x40; //允许接收
        ORL     0x86,#0x40
//  243       IEN0 |= 0x84; //开总中断允许接收中断  
        ORL     0xa8,#0x84
//  244   
//  245   
//  246 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE CLKCONCMD
        REQUIRE CLKCONSTA
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE P2DIR
        REQUIRE U0CSR
        REQUIRE U0GCR
        REQUIRE U0BAUD
        REQUIRE _A_IRCON2
        REQUIRE _A_IEN0
//  247 
//  248 
//  249 
//  250 /*********************************************************************
//  251 * @fn      SerialApp_Init
//  252 *
//  253 * @brief   This is called during OSAL tasks' initialization.
//  254 *
//  255 * @param   task_id - the Task ID assigned by OSAL.
//  256 *
//  257 * @return  none
//  258 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_Init
        CODE
//  260 {
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, Init_Wifi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  261 	halUARTCfg_t uartConfig;
//  262     
//  263     P0SEL &= 0xEf;                  //设置P0.4口为普通IO
        ANL     0xf3,#0xef
//  264     P0DIR |= 0x10;                  //设置P0.4为输出
        ORL     0xfd,#0x10
//  265     LAMP_PIN = 0;                   //高电平继电器断开;低电平继电器吸合
        CLR     0x80.4
//  266     P0SEL &= ~0x20;                 //设置P0.5为普通IO口
        ANL     0xf3,#0xdf
//  267     P0DIR &= ~0x20;                 //P0.5定义为输入口
        ANL     0xfd,#0xdf
//  268     P0SEL &= 0x7f;                  //P0_7配置成通用io
        ANL     0xf3,#0x7f
//  269 	
//  270 	SerialApp_TaskID = task_id;
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  271 	//SerialApp_RxSeq = 0xC3;
//  272 	
//  273 	afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SerialApp_epDesc & 0xff
        MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  274 	
//  275 	RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  276 	
//  277 	uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  278 	uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  279 	uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  280 	uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  281 	uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  282 	uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  283 	uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  284 	uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  285 	uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
//  286 	HalUARTOpen (UART0, &uartConfig);
??CrossCallReturnLabel_2:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  287         ////cici
//  288 #if defined(ZDO_COORDINATOR)       
//  289         
//  290 #else      
//  291     initUART0();
//  292 #endif
//  293     
//  294 #if defined ( LCD_SUPPORTED )
//  295 	HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "SerialApp">` & 0xff
        MOV     R3,#(`?<Constant "SerialApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  296 #endif
//  297 	//HalUARTWrite(UART0, "Init", 4);
//  298         
//  299 	ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  300 	ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  301  //       Init_ESP8266();
//  302 #if defined(ZDO_COORDINATOR)       
//  303         Init_Wifi();
        ; Setup parameters for call to function Init_Wifi
        LCALL   ??Init_Wifi?relay
//  304 #else        
//  305         osal_start_timerEx( SerialApp_TaskID,
//  306                             SERIALAPP_SEND_PERIODIC_EVT,
//  307                             SERIALAPP_SEND_PERIODIC_TIMEOUT ); 
//  308 #endif
//  309 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  310 
//  311 /*********************************************************************
//  312 * @fn      SerialApp_ProcessEvent
//  313 *
//  314 * @brief   Generic Application Task event processor.
//  315 *
//  316 * @param   task_id  - The OSAL assigned task ID.
//  317 * @param   events   - Bit map of events to process.
//  318 *
//  319 * @return  Event flags of all unprocessed events.
//  320 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  321 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
        CODE
//  322 {
        FUNCALL SerialApp_ProcessEvent, SerialApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  323 	(void)task_id;  // Intentionally unreferenced parameter
//  324 	
//  325 	if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??SerialApp_ProcessEvent_0
//  326 	{
//  327 		afIncomingMSGPacket_t *MSGpkt;
//  328 		
//  329 		while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  330 		{
//  331 			switch ( MSGpkt->hdr.event )
//  332 			{
//  333 			case ZDO_CB_MSG:
//  334 				//SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  335 				break;
//  336 				
//  337 			case KEY_CHANGE:
//  338 				SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  339 				break;
//  340 				
//  341 			case AF_INCOMING_MSG_CMD:
//  342 				SerialApp_ProcessMSGCmd( MSGpkt );
//  343 				break;
//  344                 
//  345             case ZDO_STATE_CHANGE:
//  346               SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  347               if ( (SerialApp_NwkState == DEV_ZB_COORD)
//  348                   || (SerialApp_NwkState == DEV_ROUTER)
//  349                   || (SerialApp_NwkState == DEV_END_DEVICE) )
//  350               {
//  351                 #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
//  352                     Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  353                     Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
//  354                     Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  355                     #if UART_DEBUG           
//  356                     PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
//  357                     #endif 
//  358                     //初始化灯的状态，1为熄灭状态，0为点亮
//  359                     NodeData[0][3] = 1;
//  360                     NodeData[1][3] = 1;
//  361                     NodeData[2][3] = 1;
//  362                     NodeData[3][3] = 1;
//  363                 #else                        //终端无线发送短地址、IEEE   
//  364                     AfSendAddrInfo();
//  365                 #endif
//  366                 
//  367               }
//  368               break;				
//  369 			default:
//  370 				break;
//  371 			}
//  372 			
//  373 			osal_msg_deallocate( (uint8 *)MSGpkt );
//  374 		}
//  375 		
//  376 		return ( events ^ SYS_EVENT_MSG );
//  377 	}
//  378     
//  379     //在此事件中可以定时向协调器发送节点传感器参数信息
//  380     if ( events & SERIALAPP_SEND_PERIODIC_EVT )
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
//  381     {
//  382         SerialApp_SendPeriodicMessage();
        ; Setup parameters for call to function SerialApp_SendPeriodicMessage
        LCALL   ??SerialApp_SendPeriodicMessage?relay
//  383         
//  384         osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  385             (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x1
        MOV     R5,A
        LCALL   ?Subroutine7 & 0xFFFF
//  386         
//  387         return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
??CrossCallReturnLabel_7:
        MOV     A,R6
        XRL     A,#0x3
??SerialApp_ProcessEvent_2:
        MOV     R2,A
        MOV     A,R7
??SerialApp_ProcessEvent_3:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
//  388     }
??SerialApp_ProcessEvent_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SerialApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_6:
        MOV     DPTR,#Broadcast_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#Broadcast_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 3
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 8
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 13
        MOVX    @DPTR,A
        MOV     DPTR,#NodeData + 18
        MOVX    @DPTR,A
??SerialApp_ProcessEvent_7:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SerialApp_ProcessEvent_8
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SerialApp_ProcessEvent_9
        ADD     A,#0x5a
        JZ      ??SerialApp_ProcessEvent_10
        ADD     A,#-0x11
        JZ      ??SerialApp_ProcessEvent_5
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_10:
        ; Setup parameters for call to function SerialApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SerialApp_HandleKeys?relay
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_9:
        ; Setup parameters for call to function SerialApp_ProcessMSGCmd
        LCALL   ??SerialApp_ProcessMSGCmd?relay
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
//  389     
//  390 	if ( events & SERIALAPP_SEND_EVT )
??SerialApp_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_ProcessEvent_11
//  391 	{
//  392 		SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  393 		return ( events ^ SERIALAPP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  394 	}
//  395 	
//  396 	if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_11:
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_12
//  397 	{
//  398 		SerialApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_RxAddr & 0xff
        MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JZ      ??SerialApp_ProcessEvent_13
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  399 		return ( events ^ SERIALAPP_RESP_EVT );
??SerialApp_ProcessEvent_13:
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  400 	}
//  401 	
//  402 	return ( 0 ); 
??SerialApp_ProcessEvent_12:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock4
??SerialApp_ProcessEvent_4:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  403 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     R2,#0x3
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  404 
//  405 /*********************************************************************
//  406 * @fn      SerialApp_HandleKeys
//  407 *
//  408 * @brief   Handles all key events for this device.
//  409 *
//  410 * @param   shift - true if in shift/alt.
//  411 * @param   keys  - bit field for key events.
//  412 *
//  413 * @return  none
//  414 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
SerialApp_HandleKeys:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function SerialApp_HandleKeys
        CODE
//  416 {
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R7,A
//  417 	zAddrType_t txAddr;
//  418 	
//  419     if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
        MOV     C,0xE0 /* A   */.5
        JNC     ??SerialApp_HandleKeys_0
//  420     {
//  421       if(SendFlag == 0)
        MOV     DPTR,#SendFlag
        MOVX    A,@DPTR
        JNZ     ??SerialApp_HandleKeys_1
//  422         {
//  423         SendFlag = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  424         HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        LCALL   ??HalLedSet?relay
//  425         osal_start_timerEx( SerialApp_TaskID,
//  426                             SERIALAPP_SEND_PERIODIC_EVT,
//  427                             SERIALAPP_SEND_PERIODIC_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        LCALL   ?Subroutine7 & 0xFFFF
//  428         }
??CrossCallReturnLabel_8:
        SJMP    ??SerialApp_HandleKeys_0
//  429         else
//  430         {      
//  431             SendFlag = 0;
??SerialApp_HandleKeys_1:
        CLR     A
        MOVX    @DPTR,A
//  432             HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  433             osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  434         }
//  435     }
//  436     
//  437     if ( keys & HAL_KEY_SW_1 ) //按S2
??SerialApp_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_HandleKeys_2
//  438     {
//  439         LAMP_PIN = ~LAMP_PIN;
        SETB    B.0
        MOV     C,0x80.4
        JNB     B.0,??SerialApp_HandleKeys_3
        CPL     C
??SerialApp_HandleKeys_3:
        MOV     0x80.4,C
//  440     }
//  441     
//  442     if ( keys & HAL_KEY_SW_2 )
??SerialApp_HandleKeys_2:
        MOV     ?V0 + 0,#SerialApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(SerialApp_ClusterList >> 8) & 0xff
        MOV     C,0xE0 /* A   */.1
        JNC     ??SerialApp_HandleKeys_4
//  443     {
//  444         HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  445         
//  446         // Initiate an End Device Bind Request for the mandatory endpoint
//  447         txAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine4 & 0xFFFF
//  448         txAddr.addr.shortAddr = 0x0000; // Coordinator
??CrossCallReturnLabel_3:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  449         ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
//  450             SerialApp_epDesc.endPoint,
//  451             SERIALAPP_PROFID,
//  452             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  453             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  454             FALSE );
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,#0x5
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0xb
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  455     }
//  456     
//  457     if ( keys & HAL_KEY_SW_3 )
//  458     {
//  459     }
//  460     
//  461     if ( keys & HAL_KEY_SW_4 )
??SerialApp_HandleKeys_4:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??SerialApp_HandleKeys_5
//  462     {
//  463         HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  464         
//  465         // Initiate a Match Description Request (Service Discovery)
//  466         txAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        LCALL   ?Subroutine4 & 0xFFFF
//  467         txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
??CrossCallReturnLabel_4:
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  468         ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
//  469             SERIALAPP_PROFID,
//  470             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  471             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  472             FALSE );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,#0x2
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  473     }
//  474 
//  475 }
??SerialApp_HandleKeys_5:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock13
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  476 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  477 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SerialApp_ProcessMSGCmd:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function SerialApp_ProcessMSGCmd
        CODE
//  478 {
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  479     uint16 shortAddr;
//  480     uint8 *pIeeeAddr; 
//  481     uint8 delay;
//  482     uint8 afRxData[30]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  483 
//  484     
//  485     
//  486 	//查询单个终端上所有传感器的数据 3A 00 01 02 39 23  响应：3A 00 01 02 00 00 00 00 xor 23
//  487 	switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_1
        CODE
//  488 	{
//  489 	// A message with a serial data block to be transmitted on the serial port.
//  490 	case SERIALAPP_CLUSTERID:
//  491         osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
??SerialApp_ProcessMSGCmd_0:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  492         
//  493         #if defined(ZDO_COORDINATOR)
//  494         #else 
//  495             HalUARTWrite (UART0, afRxData, pkt->cmd.DataLength); //调试时通过串口输出
//  496         #endif    
//  497 		switch(afRxData[0]) //简单协议命令字解析
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_9 & 0xFFFF
//  498 		{
//  499 #if defined(ZDO_COORDINATOR)
//  500 		case 0x3B:  //收到终端无线发过来的短地址和IEEE地址,通过串口输出显示      
//  501 			shortAddr=(afRxData[1]<<8)|afRxData[2];
//  502 			pIeeeAddr = &afRxData[3];
//  503             #if UART_DEBUG
//  504 			PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
//  505             #endif   
//  506 			break;
//  507 		case 0x3A:	
//  508             if(afRxData[3] == 0x02) //收到终端传过来的传感器数据并保存
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_9 & 0xFFFF
//  509             {  
//  510                 NodeData[afRxData[2]-1][0] = afRxData[4];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#NodeData & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(NodeData >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x5
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  511                 NodeData[afRxData[2]-1][1] = afRxData[5];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x4
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  512                 NodeData[afRxData[2]-1][2] = afRxData[6];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x3
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  513                 NodeData[afRxData[2]-1][3] = afRxData[7];
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  514                 NodeData[afRxData[2]-1][4] = 0x00;
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  515                 
//  516  /////////////////////////////cici////*******************************////////////////               
//  517                 //协调器采集的数据 待发送
//  518               osal_memset(Data_Report,0x00,30);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1e
        MOV     R5,A
        MOV     R1,A
        MOV     R2,#Data_Report & 0xff
        MOV     R3,#(Data_Report >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  519               osal_memcpy(Data_Report, afRxData, 30); 
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x1e
        MOV     R5,#0x0
        MOV     R2,#Data_Report & 0xff
        MOV     R3,#(Data_Report >> 8) & 0xff
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  520 
//  521               osal_memset(afRxData,0x00,30);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1e
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        SJMP    ??CrossCallReturnLabel_9
//  522 //////////////////**************************************/////////////////////////////////
//  523               }
//  524            ///////////////////////////////////////////////   
//  525             
//  526         #if UART_DEBUG
//  527             HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //调试时通过串口输出
//  528             HalUARTWrite (UART0, "\n", 1);
//  529         #endif            
//  530            break;
//  531 #else  
//  532 		case 0x3A:  //开关灯设备          
//  533         if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //控制终端          
//  534         {  
//  535 			if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
//  536 			{
//  537 				if(afRxData[4] == 0)
//  538                 {
//  539                     LAMP_PIN = 1;
//  540 				//	HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  541                 }
//  542 				else
//  543                 {
//  544                     LAMP_PIN = 0;
//  545 				//	HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  546                 }
//  547 			}
//  548 			break;
//  549         }		
//  550 #endif
//  551         default :
//  552             break;
//  553         }
//  554         break;
//  555 		// A response to a received serial data block.
//  556 		case SERIALAPP_CLUSTERID2:
//  557 			if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
//  558 				((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
??SerialApp_ProcessMSGCmd_1:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#SerialApp_TxSeq
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??SerialApp_ProcessMSGCmd_2
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      ??SerialApp_ProcessMSGCmd_3
        XRL     A,#0x1
        JNZ     ??SerialApp_ProcessMSGCmd_2
//  559 			{
//  560 				SerialApp_TxLen = 0;
??SerialApp_ProcessMSGCmd_3:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  561 				osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??CrossCallReturnLabel_9
//  562 			}
//  563 			else
//  564 			{
//  565 				// Re-start timeout according to delay sent from other device.
//  566 				delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
//  567 				osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
??SerialApp_ProcessMSGCmd_2:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        LCALL   ??Subroutine9_0 & 0xFFFF
//  568 			}
//  569 			break;
//  570 			
//  571 		default:
//  572 			break;
//  573 	}
//  574 }
??CrossCallReturnLabel_9:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
//  575 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  576 uint8 TxBuffer[128];
TxBuffer:
        DS 128
        REQUIRE __INIT_XDATA_Z
//  577 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  578 uint8 SendData(uint8 addr, uint8 FC)
SendData:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function SendData
        CODE
//  579 {
        FUNCALL SendData, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 7,R1
        MOV     ?V0 + 3,R2
//  580 	uint8 ret, i, index=4;
        MOV     ?V0 + 2,#0x4
//  581 
//  582         osal_memset(TxBuffer,0x00,128);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  583         
//  584 	TxBuffer[0] = 0x3A;
        MOV     DPTR,#TxBuffer
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  585 	TxBuffer[1] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  586 	TxBuffer[2] = addr;
        MOV     A,?V0 + 7
        INC     DPTR
        MOVX    @DPTR,A
//  587 	TxBuffer[3] = FC;
        MOV     A,?V0 + 3
        INC     DPTR
        MOVX    @DPTR,A
//  588 
//  589 	switch(FC)
        DEC     A
        JZ      ??SendData_0
        DEC     A
        JZ      ??SendData_1
        LJMP    ??SendData_2 & 0xFFFF
//  590 	{
//  591 	case 0x01: //查询所有终端传感器的数据
//  592 		for (i=0; i<MAX_NODE; i++)
??SendData_0:
        MOV     R6,#0x0
//  593 		{
//  594 			osal_memcpy(&TxBuffer[index], NodeData[i], 4);
??SendData_3:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#NodeData & 0xff
        ADD     A,R0
        MOV     ?V0 + 4,A
        MOV     A,#(NodeData >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  595 			index += 4;
        MOV     A,#0x4
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
//  596 		}
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??SendData_3
//  597 		TxBuffer[index] = XorCheckSum(TxBuffer, index);
        MOV     DPL,?V0 + 2
        MOV     R6,DPL
        MOV     A,#TxBuffer & 0xff
        ADD     A,R6
        MOV     ?V0 + 0,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,?V0 + 2
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  598 		TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  599 		
//  600 		HalUARTWrite(UART0, TxBuffer, index+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
??SendData_4:
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  601         ret = 1;
        MOV     R1,#0x1
//  602 		break;
        SJMP    ??SendData_5
//  603 	case 0x02: //查询单个终端上所有传感器的数据
//  604 		osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
??SendData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 7
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(NodeData + 251) & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#((NodeData - 5) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(TxBuffer + 4) & 0xff
        MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  605 		index += 4;
//  606 		TxBuffer[index] = XorCheckSum(TxBuffer, index);
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,#0x8
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPTR,#TxBuffer + 8
        MOVX    @DPTR,A
//  607 		TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  608 	
//  609 		HalUARTWrite(UART0, TxBuffer, index+2);		
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        SJMP    ??SendData_4
//  610         ret = 1;
//  611 		break;   
//  612 	default:
//  613         ret = 0;
??SendData_2:
        MOV     R1,#0x0
//  614 		break;
//  615 	}
//  616 
//  617     return ret;
??SendData_5:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22
//  618 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 533)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 533)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  619 
//  620 /*********************************************************************
//  621 * @fn      SerialApp_Send
//  622 *
//  623 * @brief   Send data OTA.
//  624 *
//  625 * @param   none
//  626 *
//  627 * @return  none
//  628 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  629 static void SerialApp_Send(void)
SerialApp_Send:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function SerialApp_Send
        CODE
//  630 {
        FUNCALL SerialApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, sscanf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 534, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 534, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 533, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 533, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 539, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 539, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 530, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 530, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 515
        MOV     DPL,#-0x3
        MOV     DPH,#-0x3
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 530)
//  631     uint8  addr, FC;
//  632 //    uint8 checksum=0;
//  633     int len=0;
//  634     int i;
//  635     
//  636     uint8 length[3]={0};
        MOV     DPL,?XSP + 0
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  637     uint8 tmpbuf[256]={0};
        MOV     DPL,#0x3
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  638     uint8 cmd[256]={0};
        DEC     R5
        MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_3` & 0xff
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  639  //  char *p=NULL;
//  640 	
//  641 #if SERIAL_APP_LOOPBACK
//  642 	if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
//  643 	{
//  644 		SerialApp_TxLen += HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
//  645 			SERIAL_APP_TX_MAX-SerialApp_TxLen);
//  646 	}
//  647 	
//  648 	if (SerialApp_TxLen)
//  649 	{
//  650 		(void)SerialApp_TxAddr;
//  651 		if (HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen))
//  652 		{
//  653 			SerialApp_TxLen = 0;
//  654 		}
//  655 		else
//  656 		{
//  657 			osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  658 		}
//  659 	}
//  660 #else
//  661 	if (!SerialApp_TxLen && 
//  662 		(SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x28
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  663 	
//  664         {
//  665         if (SerialApp_TxLen)
//  666         {
//  667             
//  668 //////////////////////////***********************/////////////////////////////////////////////
//  669              if(strstr((char *)SerialApp_TxBuf,"+IPD")!=NULL) //接收的指令
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "+IPD">` & 0xff
        MOV     R5,#(`?<Constant "+IPD">` >> 8) & 0xff
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        JNZ     $+5
        LJMP    ??SerialApp_Send_1 & 0xFFFF
//  670              {
//  671                sscanf(SerialApp_TxBuf,"%*[^,]%*c%*[^,]%*c%[^:]%*c%s]",length,tmpbuf);            
        ; Setup parameters for call to function sscanf
        MOV     DPL,#0x3
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 532)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 534)
        MOV     R4,#`?<Constant "%*[^,]%*c%*[^,]%*c%[^...">` & 0xff
        MOV     R5,#(`?<Constant "%*[^,]%*c%*[^,]%*c%[^...">` >> 8) & 0xff
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??sscanf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 530)
//  672                len=atoi(length);
        ; Setup parameters for call to function atoi
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??atoi?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  673                
//  674                for(i=0;i<SerialApp_TxLen;i++)
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??SerialApp_Send_2
??SerialApp_Send_3:
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??SerialApp_Send_2:
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,R2
        MOV     R0,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,R3
        MOV     R1,A
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        MOV     R4,A
        CLR     C
        MOV     A,R2
        SUBB    A,R4
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??SerialApp_Send_4
//  675                {
//  676                  if(SerialApp_TxBuf[i]==':')          
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JNZ     ??SerialApp_Send_3
//  677                    break;
//  678                }
//  679                
//  680                osal_memcpy(cmd,&SerialApp_TxBuf[i+1],len);
??SerialApp_Send_4:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 533)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 530)
//  681                adr = cmd[2];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#adr
        MOVX    @DPTR,A
//  682                fc=cmd[3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#fc
        MOVX    @DPTR,A
//  683                
//  684                HalLcdWriteString( "cmd ready....", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "cmd ready....">` & 0xff
        MOV     R3,#(`?<Constant "cmd ready....">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  685                
//  686                if(cmd[3]==0x0A) //控制指令 广播出去
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xa
        XRL     A,R0
        JNZ     ??SerialApp_Send_5
//  687 	      {   
//  688                //将收到的命令通过无线的形式发送出去
//  689                 if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
//  690                                                         (endPointDesc_t *)&SerialApp_epDesc,
//  691                                                          SERIALAPP_CLUSTERID,
//  692                                                          len, cmd,
//  693                                                          &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS)) 
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 531)
        MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 533)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 535)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 537)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 539)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#Broadcast_DstAddr & 0xff
        MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 530)
        MOV     A,R1
        JNZ     ??SerialApp_Send_6
//  694 
//  695                   {
//  696                     Delay_ms(500);
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
//  697                     HalLcdWriteString( "cmd send[ok]....", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "cmd send[ok]....">` & 0xff
        MOV     R3,#(`?<Constant "cmd send[ok]....">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        SJMP    ??SerialApp_Send_6
//  698                 
//  699                   }
//  700                 }
//  701               else if(cmd[3]==0x02)//查询指令 上报数据
??SerialApp_Send_5:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??SerialApp_Send_7
//  702                {
//  703                     if(flag==0x00)
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        JNZ     ??SerialApp_Send_6
//  704                     {
//  705                       HalUARTWrite (UART0,"AT+CIPSEND=0,10\r\n",16);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND=0,10\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND=0,10\\r\\n">` >> 8) & 0xff
        SJMP    ??SerialApp_Send_8
//  706                       flag=0x01;
//  707                     }
//  708              //       Delay_ms(500);
//  709                }
//  710                else if(cmd[3]==0x01)//查询指令 上报数据
??SerialApp_Send_7:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??SerialApp_Send_6
//  711                {
//  712                     if(flag==0x00)
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        JNZ     ??SerialApp_Send_6
//  713                     {
//  714                       HalUARTWrite (UART0,"AT+CIPSEND=0,22\r\n",16);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND=0,22\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND=0,22\\r\\n">` >> 8) & 0xff
??SerialApp_Send_8:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  715                       flag=0x01;
        MOV     DPTR,#flag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  716                     }
//  717              //       Delay_ms(500);
//  718                }              
//  719                
//  720                                               
//  721                HalLcdWriteString( "wait cmd....", HAL_LCD_LINE_3 );
??SerialApp_Send_6:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "wait cmd....">` & 0xff
        MOV     R3,#(`?<Constant "wait cmd....">` >> 8) & 0xff
        LJMP    ??SerialApp_Send_9 & 0xFFFF
//  722                
//  723                
//  724              }        
//  725               //    sprintf(Recdata,"%s",SerialApp_TxBuf); ////????
//  726              //     HalLcdWriteString( Recdata, HAL_LCD_LINE_2 );
//  727              else if((strstr(&SerialApp_TxBuf[1],"OK")!=NULL)||(strstr(&SerialApp_TxBuf[1],"no change")!=NULL))
??SerialApp_Send_1:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "OK">` & 0xff
        MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
        MOV     R2,#(SerialApp_TxBuf + 1) & 0xff
        MOV     R3,#((SerialApp_TxBuf + 1) >> 8) & 0xff
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ     ??SerialApp_Send_10
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "no change">` & 0xff
        MOV     R5,#(`?<Constant "no change">` >> 8) & 0xff
        MOV     R2,#(SerialApp_TxBuf + 1) & 0xff
        MOV     R3,#((SerialApp_TxBuf + 1) >> 8) & 0xff
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_19:
        JZ      ??SerialApp_Send_11
//  728              {
//  729                    if(tasksteps == STEP2)
??SerialApp_Send_10:
        MOV     DPTR,#tasksteps
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_Send_12
//  730                    {                     
//  731                      HalLcdWriteString( "CIPMUX...[ok].", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "CIPMUX...[ok].">` & 0xff
        MOV     R3,#(`?<Constant "CIPMUX...[ok].">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  732                      HalUARTWrite(UART0, "AT+CIPSERVER=1,33333\r\n", 21);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSERVER=1,33333\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSERVER=1,33333\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  733                      Delay_ms(500);
//  734                
//  735                      tasksteps = STEP3;
//  736                    }
??CrossCallReturnLabel_1:
        MOV     A,#0x2
??SerialApp_Send_13:
        MOVX    @DPTR,A
        SJMP    ??SerialApp_Send_14
//  737                    else if(tasksteps == STEP3)
??SerialApp_Send_12:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SerialApp_Send_14
//  738                    {
//  739                       HalLcdWriteString( "Init Server.[ok]", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "Init Server.[ok]">` & 0xff
        MOV     R3,#(`?<Constant "Init Server.[ok]">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  740                       
//  741                        tasksteps = STEP4;                                 
        MOV     DPTR,#tasksteps
        MOV     A,#0x3
        SJMP    ??SerialApp_Send_13
//  742                    }
//  743               /*     else if((strstr(SerialApp_TxBuf,"Link")!=NULL))
//  744                    {
//  745                       HalLcdWriteString( "Link [ok]..", HAL_LCD_LINE_3 );
//  746                    } */
//  747                    
//  748               }
//  749               else if(strstr(&SerialApp_TxBuf[1],">")!=NULL)
??SerialApp_Send_11:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant ">">` & 0xff
        MOV     R5,#(`?<Constant ">">` >> 8) & 0xff
        MOV     R2,#(SerialApp_TxBuf + 1) & 0xff
        MOV     R3,#((SerialApp_TxBuf + 1) >> 8) & 0xff
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_20:
        JZ      ??SerialApp_Send_15
//  750               {
//  751                 osal_memset(SerialApp_TxBuf,0x00,31);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1f
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  752                 if(flag==0x01)
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_Send_14
//  753                 {
//  754   /*               if(cmd[3]==0x02) //查询单个终端
//  755                  {
//  756                   HalUARTWrite(UART0, Data_Report, 10);//发送采集的数据
//  757                   Delay_ms(500);
//  758                   flag=0x00;
//  759                  }
//  760                  else if(cmd[3]==0x01) //查询所有终端
//  761                  {
//  762                    
//  763                  }
//  764                  
//  765   */
//  766                 
//  767                   
//  768                    SendData(adr, fc);
        ; Setup parameters for call to function SendData
        MOV     DPTR,#fc
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#adr
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SendData?relay
//  769                    flag=0x00;
        MOV     DPTR,#flag
        CLR     A
        SJMP    ??SerialApp_Send_13
//  770                    
//  771                 }
//  772                 
//  773               }
//  774               else if((strstr(SerialApp_TxBuf,"Link")!=NULL))
??SerialApp_Send_15:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "Link">` & 0xff
        MOV     R5,#(`?<Constant "Link">` >> 8) & 0xff
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        JZ      ??SerialApp_Send_16
//  775               {
//  776                    HalLcdWriteString( "Link [ok]..", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "Link [ok]..">` & 0xff
        MOV     R3,#(`?<Constant "Link [ok]..">` >> 8) & 0xff
        SJMP    ??SerialApp_Send_9
//  777               } 
//  778               else if((strstr(SerialApp_TxBuf,"UnLink")!=NULL))
??SerialApp_Send_16:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "UnLink">` & 0xff
        MOV     R5,#(`?<Constant "UnLink">` >> 8) & 0xff
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ      ??SerialApp_Send_14
//  779               {
//  780                    HalLcdWriteString( "UnLink ..", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "UnLink ..">` & 0xff
        MOV     R3,#(`?<Constant "UnLink ..">` >> 8) & 0xff
??SerialApp_Send_9:
        LCALL   ??HalLcdWriteString?relay
//  781                } 
//  782              
//  783                osal_memset(tmpbuf,0x00,31);
??SerialApp_Send_14:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1f
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,#0x3
        MOV     DPH,#0x1
        LCALL   ?XSTACK_DISP0_16
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  784               
//  785                osal_memset(SerialApp_TxBuf,0x00,31);            
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1f
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  786              
//  787                len=0;
//  788                SerialApp_TxLen = 0;  
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  789  //////////////////////////***********************/////////////////////////////////////////////           
//  790         }
//  791     }
//  792 #endif
//  793 }
??SerialApp_Send_0:
        MOV     DPL,#0x3
        MOV     DPH,#0x2
        LCALL   ?ADD_XSTACK_DISP0_16
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        LCALL   ??strstr?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 530)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function Delay_ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??Delay_ms?relay
        MOV     DPTR,#tasksteps
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
//  794 
//  795 /*********************************************************************
//  796 * @fn      SerialApp_Resp
//  797 *
//  798 * @brief   Send data OTA.
//  799 *
//  800 * @param   none
//  801 *
//  802 * @return  none
//  803 */
//  804 static void SerialApp_Resp(void)
//  805 {
//  806 	if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  807 		(endPointDesc_t *)&SerialApp_epDesc,
//  808 		SERIALAPP_CLUSTERID2,
//  809 		SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  810 		&SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  811 	{
//  812 		osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
//  813 	}
//  814 }
//  815 
//  816 /*********************************************************************
//  817 * @fn      SerialApp_CallBack
//  818 *
//  819 * @brief   Send data OTA.
//  820 *
//  821 * @param   port - UART port.
//  822 * @param   event - the UART port event flag.
//  823 *
//  824 * @return  none
//  825 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  826 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  827 {
        FUNCALL SerialApp_CallBack, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  828 	(void)port;
//  829 	
//  830 	if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  831 #if SERIAL_APP_LOOPBACK
//  832 		(SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  833 #else
//  834 		!SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
//  835 #endif
//  836 	{
//  837           	
//  838 	SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  839                   
//  840         }      
//  841           
//  842           
//  843 	
//  844 }
??SerialApp_CallBack_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock47
//  845 
//  846 
//  847 //------------------------------------------------------------------------------------------------------------------------------------------
//  848 //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  849 void SerialApp_SendPeriodicMessage( void )
SerialApp_SendPeriodicMessage:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function SerialApp_SendPeriodicMessage
        CODE
//  850 {
        FUNCALL SerialApp_SendPeriodicMessage, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  851     uint8 SendBuf[11]={0};
        MOV     DPTR,#`?<Constant {0}>_4`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_4` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  852     
//  853     SendBuf[0] = 0x3A;                          
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  854     SendBuf[1] = HI_UINT16( EndDeviceID );
        MOV     DPTR,#EndDeviceID + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  855     SendBuf[2] = LO_UINT16( EndDeviceID );
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  856     SendBuf[3] = 0x02;                       //FC
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  857     
//  858     DHT11();                //获取温湿度
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  859     SendBuf[4] = wendu;  
        MOV     DPTR,#wendu
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  860     SendBuf[5] = shidu;  
        MOV     DPTR,#shidu
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  861     SendBuf[6] = GetGas();  //获取气体传感器的状态  
        MOV     C,0x80.5
        CLR     A
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  862     SendBuf[7] = GetLamp(); //获得灯的状态
        MOV     C,0x80.4
        JC      ??SerialApp_SendPeriodicMessage_0
        SETB    B.0
        SJMP    ??SerialApp_SendPeriodicMessage_1
??SerialApp_SendPeriodicMessage_0:
        CLR     B.0
??SerialApp_SendPeriodicMessage_1:
        MOV     C,B.0
        CLR     A
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  863     SendBuf[8] = XorCheckSum(SendBuf, 9);
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,#0x9
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??XorCheckSum?relay
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  864     SendBuf[9] = 0x23;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x23
        MOVX    @DPTR,A
//  865   
//  866     SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#SerialApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  867     SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
//  868     SerialApp_TxAddr.addr.shortAddr = 0x00;  
        MOV     DPTR,#SerialApp_TxAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  869     if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  870                SERIALAPP_CLUSTERID,
//  871                10,
//  872                SendBuf,
//  873                &SerialApp_MsgID, 
//  874                0, 
//  875                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr & 0xff
        MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  876     {
//  877     // Successfully requested to be sent.
//  878     }
//  879     else
//  880     {
//  881     // Error occurred in request to send.
//  882     }
//  883 }
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock48
        REQUIRE ?Subroutine2
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock49
//  884 
//  885 
//  886 
//  887 //通过串口输出短地址 IEEE
//  888 void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
//  889 {
//  890     uint8 strIeeeAddr[17] = {0};
//  891     char  buff[30] = {0};    
//  892     
//  893     //获得短地址   
//  894     sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
//  895  
//  896     //获得IEEE地址
//  897     GetIeeeAddr(pIeeeAddr, strIeeeAddr);
//  898 //cici
//  899     #if UART_DEBUG
//  900     HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
//  901     Delay_ms(10);
//  902     HalUARTWrite (UART0, strIeeeAddr, 16); 
//  903     HalUARTWrite (UART0, "\n", 1);
//  904 #endif  
//  905 }
//  906 
//  907 void AfSendAddrInfo(void)
//  908 {
//  909     uint16 shortAddr;
//  910     uint8 strBuf[11]={0};  
//  911     
//  912     SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  913     SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  914     SerialApp_TxAddr.addr.shortAddr = 0x00;   
//  915     
//  916     shortAddr=NLME_GetShortAddr();
//  917     
//  918     strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
//  919     strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
//  920     strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
//  921     
//  922     osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
//  923         
//  924    if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  925                        SERIALAPP_CLUSTERID,
//  926                        11,
//  927                        strBuf,
//  928                        &SerialApp_MsgID, 
//  929                        0, 
//  930                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  931   {
//  932   }
//  933   else
//  934   {
//  935     // Error occurred in request to send.
//  936   }   
//  937 }
//  938 
//  939 void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
//  940 {
//  941   uint8 i;
//  942   uint8 *xad = pIeeeAddr;
//  943 
//  944   for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
//  945   {
//  946     uint8 ch;
//  947     ch = (*xad >> 4) & 0x0F;
//  948     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  949     i++;
//  950     ch = *xad & 0x0F;
//  951     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  952     i++;
//  953   }
//  954 }
//  955 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  956 uint8 XorCheckSum(uint8 * pBuf, uint8 len)
XorCheckSum:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function XorCheckSum
        CODE
//  957 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  958 	uint8 i;
//  959 	uint8 byRet=0;
//  960 
//  961 	if(len == 0)
        JNZ     ??XorCheckSum_0
//  962 		return byRet;
        MOV     R1,#0x0
        SJMP    ??XorCheckSum_1
//  963 	else
//  964 		byRet = pBuf[0];
??XorCheckSum_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
//  965 
//  966 	for(i = 1; i < len; i ++)
        MOV     R0,#0x1
        SJMP    ??XorCheckSum_2
//  967 		byRet = byRet ^ pBuf[i];
??XorCheckSum_3:
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
??XorCheckSum_2:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??XorCheckSum_3
//  968 
//  969 	return byRet;
??XorCheckSum_1:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock50
//  970 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID>`:
        DATA16
        DW 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Init_Wifi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Init_Wifi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initUART0?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    initUART0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??XorCheckSum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    XorCheckSum

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "initwifi">`:
        DB "initwifi"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMUX=1\\r\\n">`:
        DB "AT+CIPMUX=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SerialApp">`:
        DB "SerialApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_3`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "+IPD">`:
        DB "+IPD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%*[^,]%*c%*[^,]%*c%[^...">`:
        DB "%*[^,]%*c%*[^,]%*c%[^:]%*c%s]"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "cmd ready....">`:
        DB "cmd ready...."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "cmd send[ok]....">`:
        DB "cmd send[ok]...."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND=0,10\\r\\n">`:
        DB "AT+CIPSEND=0,10\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND=0,22\\r\\n">`:
        DB "AT+CIPSEND=0,22\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "wait cmd....">`:
        DB "wait cmd...."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "no change">`:
        DB "no change"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CIPMUX...[ok].">`:
        DB "CIPMUX...[ok]."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSERVER=1,33333\\r\\n">`:
        DB "AT+CIPSERVER=1,33333\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Init Server.[ok]">`:
        DB "Init Server.[ok]"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ">">`:
        DB ">"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Link">`:
        DB "Link"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Link [ok]..">`:
        DB "Link [ok].."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UnLink">`:
        DB "UnLink"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UnLink ..">`:
        DB "UnLink .."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_4`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        END
//  971 
//  972 uint8 GetDataLen(uint8 fc)
//  973 {
//  974     uint8 len=0;
//  975     switch(fc)
//  976     {
//  977     case 0x0A:
//  978     case 0x0B:
//  979     case 0x0C:
//  980     case 0x0D:
//  981       len = 1;
//  982       break;
//  983     }
//  984     
//  985     return len;
//  986 }
//  987 
//  988 
//  989 //获得P0_4 继电器引脚的电平
//  990 uint8 GetLamp( void )
//  991 {
//  992   uint8 ret;
//  993   
//  994   if(LAMP_PIN == 0)
//  995     ret = 1;
//  996   else
//  997     ret = 0;
//  998   
//  999   return ret;
// 1000 }
// 1001 
// 1002 //获得P0_5 MQ-2气体传感器的数据
// 1003 uint8 GetGas( void )
// 1004 {
// 1005   uint8 ret;
// 1006   
// 1007   if(GAS_PIN == 0)
// 1008     ret = 0;
// 1009   else
// 1010     ret = 1;
// 1011   
// 1012   return ret;
// 1013 }
// 1014 
// 1015 //-------------------------------------------------------------------
// 1016 
// 1017 
// 1018 
// 
// 2 549 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//    12 bytes in segment SFR_AN
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//   830 bytes in segment XDATA_ROM_C
//   398 bytes in segment XDATA_Z
// 
// 2 617 bytes of CODE  memory
//   830 bytes of CONST memory
//     0 bytes of DATA  memory (+ 12 bytes shared)
//   400 bytes of XDATA memory
//
//Errors: none
//Warnings: 16
