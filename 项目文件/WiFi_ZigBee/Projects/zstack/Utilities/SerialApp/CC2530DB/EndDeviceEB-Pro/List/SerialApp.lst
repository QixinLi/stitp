###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         26/May/2016  22:52:11 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\Source\SerialApp.c              #
#    Command line       =  -f E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-Zig #
#                          BeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstac #
#                          k\Utilities\SerialApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func   #
#                          -DBLINK_LEDS) -f E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³ #
#                          Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\Source\SerialApp.c -D           #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D HAL_UART=TRUE -D     #
#                          SERIAL_APP_PORT=0 -D LCD_SUPPORTED -D              #
#                          xPOWER_SAVING -lC E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì #
#                          ³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\EndD #
#                          eviceEB-Pro\List\ -lA E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼° #
#                          Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_Zi #
#                          gBee\Projects\zstack\Utilities\SerialApp\CC2530DB\ #
#                          EndDeviceEB-Pro\List\ --diag_suppress Pe001,Pa010  #
#                          -o E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-Zig #
#                          BeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstac #
#                          k\Utilities\SerialApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \ -e --debug --core=plain --dptr=16,1              #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\ -I                    #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\SOURCE\ -I          #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\ZMAIN\TI2530D #
#                          B\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª- #
#                          ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zs #
#                          tack\Utilities\SerialApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MT\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³ #
#                          Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\INCLUDE\ -I               #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\HAL\TARGET\CC2530EB\ -I                        #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\OSAL\MCU\CCSOC\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼ #
#                          °Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_Z #
#                          igBee\Projects\zstack\Utilities\SerialApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I        #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\AF\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³ #
#                          Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\SEC\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì #
#                          ³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\SAPI\ -I               #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\STACK\SYS\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì #
#                          ³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee #
#                          \Projects\zstack\Utilities\SerialApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\STACK\ZDO\ -I                #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\ZMAC\F8W\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³ #
#                          Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\ #
#                          Projects\zstack\Utilities\SerialApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\SERVICES\SADDR\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼ #
#                          °Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_Z #
#                          igBee\Projects\zstack\Utilities\SerialApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I      #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\INCLUDE\ -I E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä #
#                          ½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigB #
#                          ee\Projects\zstack\Utilities\SerialApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\LOW_LEVEL\srf04\ -I                        #
#                          E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\..\..\..\..\..\COMPONE #
#                          NTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz          #
#    List file          =  E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\EndDeviceEB-Pro\List\S #
#                          erialApp.lst                                       #
#    Object file        =  E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBee #
#                          Íø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\U #
#                          tilities\SerialApp\CC2530DB\EndDeviceEB-Pro\Obj\Se #
#                          rialApp.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
      1          /*********************************************************************
      2          * INCLUDES
      3          */
      4          #include <stdio.h>
      5          #include <string.h>
      6          #include <stdlib.h>
      7          
      8          #include "AF.h"
      9          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     10          #include "OSAL_Tasks.h"
     11          #include "SerialApp.h"
     12          #include "ZDApp.h"
     13          #include "ZDObject.h"
     14          #include "ZDProfile.h"
     15          
     16          #include "hal_drivers.h"
     17          #include "hal_key.h"
     18          #if defined ( LCD_SUPPORTED )
     19          #include "hal_lcd.h"
     20          #endif
     21          #include "hal_led.h"
     22          #include "hal_uart.h"
     23          
     24          #include "DHT11.h"
     25          #include "nwk_globals.h"
     26          #include "WIFI.H"
     27          /*********************************************************************
     28          * MACROS
     29          */
     30          #define COORD_ADDR   0x00
     31          #define ED_ADDR      0x01
     32          #define UART0        0x00
     33          #define MAX_NODE     0x04
     34          #define UART_DEBUG   0x00        //µ÷ÊÔºê,Í¨¹ı´®¿ÚÊä³öĞ­µ÷Æ÷ºÍÖÕ¶ËµÄIEEE¡¢¶ÌµØÖ·
     35          #define LAMP_PIN     P0_4        //¶¨ÒåP0.4¿ÚÎª¼ÌµçÆ÷ÊäÈë¶Ë
     36          #define GAS_PIN      P0_5        //¶¨ÒåP0.5¿ÚÎªÑÌÎí´«¸ĞÆ÷µÄÊäÈë¶Ë  
     37          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     38          
     39          //---------------------------------------------------------------------
     40          //±ê×¼°æ²»Í¬µÄÖÕ¶ËĞèÒªĞŞ¸Ä´ËID,ÓÃÓÚÊ¶±ğĞ­µ÷Æ÷·¢¹ıÀ´µÄÊı¾İ£¬IDÏàÍ¬Ôò´¦Àí
     41          //×¨Òµ°æ×Ô¶¯´ÓFlash»ñµÃµØÖ·£¬ËùÓĞÖÕ¶Ë¹Ì¼şÏàÍ¬£¬ÊÊºÏÁ¿²ú

   \                                 In  segment XDATA_I, align 1, keep-with-next
     42          static uint16 EndDeviceID = 0x0001; //ÖÕ¶ËID£¬ÖØÒª
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
     43          //---------------------------------------------------------------------
     44          
     45          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     46          unsigned char tempRX;
   \                     tempRX:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     47          //±äÁ¿
     48          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     49          unsigned char  Recdata[128];
   \                     Recdata:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
     50          
     51          
     52          /*********************************************************************/
     53          
     54          #define STEP1 0x00
     55          
     56          #define STEP2 0x01
     57          
     58          #define STEP3 0x02
     59          
     60          #define STEP4 0x03

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     61          static uint8 tasksteps = STEP1;
   \                     tasksteps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          uint8 adr=0x00;
   \                     adr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     63          uint8 fc=0x00;
   \                     fc:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     64          
     65          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          uint8 Data_Report[30]={0};
   \                     Data_Report:
   \   000000                DS 30
   \   00001E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     67          uint8 flag=0x00;
   \                     flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     68          
     69          /*********************************************************************/
     70          /* CONSTANTS
     71          */
     72          
     73          #if !defined( SERIAL_APP_PORT )
     74          #define SERIAL_APP_PORT  0
     75          #endif
     76          
     77          #if !defined( SERIAL_APP_BAUD )
     78          //#define SERIAL_APP_BAUD  HAL_UART_BR_38400
     79          #define SERIAL_APP_BAUD  HAL_UART_BR_115200
     80          #endif
     81          
     82          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     83          #if !defined( SERIAL_APP_THRESH )
     84          #define SERIAL_APP_THRESH  64
     85          #endif
     86          
     87          #if !defined( SERIAL_APP_RX_SZ )
     88          #define SERIAL_APP_RX_SZ  128
     89          #endif
     90          
     91          #if !defined( SERIAL_APP_TX_SZ )
     92          #define SERIAL_APP_TX_SZ  128
     93          #endif
     94          
     95          // Millisecs of idle time after a byte is received before invoking Rx callback.
     96          #if !defined( SERIAL_APP_IDLE )
     97          #define SERIAL_APP_IDLE  6
     98          #endif
     99          
    100          // Loopback Rx bytes to Tx for throughput testing.
    101          #if !defined( SERIAL_APP_LOOPBACK )
    102          #define SERIAL_APP_LOOPBACK  FALSE
    103          #endif
    104          
    105          // This is the max byte count per OTA message.
    106          #if !defined( SERIAL_APP_TX_MAX )
    107          //#define SERIAL_APP_TX_MAX  30
    108          #define SERIAL_APP_TX_MAX  40
    109          #endif
    110          
    111          #define SERIAL_APP_RSP_CNT  4
    112          
    113          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    114          const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
   \                     SerialApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0000         DW 0
    115          {
    116          	SERIALAPP_CLUSTERID
    117          };
    118          

   \                                 In  segment XDATA_ROM_C, align 1
    119          const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
   \                     SerialApp_SimpleDesc:
   \   000000   0B           DB 11
   \   000001   050F         DW 3845
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SerialApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SerialApp_ClusterList
    120          {
    121          	SERIALAPP_ENDPOINT,              //  int   Endpoint;
    122              SERIALAPP_PROFID,                //  uint16 AppProfId[2];
    123              SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    124              SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    125              SERIALAPP_FLAGS,                 //  int   AppFlags:4;
    126              SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    127              (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
    128              SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
    129              (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
    130          };
    131          

   \                                 In  segment XDATA_ROM_C, align 1
    132          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   0B           DB 11
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SerialApp_SimpleDesc
   \   000005   00           DB 0
    133          {
    134          	SERIALAPP_ENDPOINT,
    135              &SerialApp_TaskID,
    136              (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
    137              noLatencyReqs
    138          };
    139          
    140          /*********************************************************************
    141          * TYPEDEFS
    142          */
    143          
    144          /*********************************************************************
    145          * GLOBAL VARIABLES
    146          */
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          
    150          /*********************************************************************
    151          * EXTERNAL VARIABLES
    152          */
    153          
    154          /*********************************************************************
    155          * EXTERNAL FUNCTIONS
    156          */
    157          
    158          /*********************************************************************
    159          * LOCAL VARIABLES
    160          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          static bool SendFlag = 0;
   \                     SendFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          
    163          static uint8 SerialApp_MsgID;
    164          
    165          static afAddrType_t SerialApp_TxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          static afAddrType_t Broadcast_DstAddr;
   \                     Broadcast_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    167          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          static uint8 SerialApp_TxSeq;
   \                     SerialApp_TxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 41
   \   000029                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          static afAddrType_t SerialApp_RxAddr;
   \                     SerialApp_RxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
   \                     SerialApp_RspBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    174          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          static devStates_t SerialApp_NwkState;
   \                     SerialApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          static afAddrType_t SerialApp_TxAddr;
   \                     SerialApp_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          static uint8 SerialApp_MsgID;
   \                     SerialApp_MsgID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8 NodeData[MAX_NODE][5];         //ÖÕ¶ËÊı¾İ»º³åÇø 0=ÎÂ¶È 1=Êª¶È 2=ÆøÌå 3=µÆ
   \                     NodeData:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    180          
    181          
    182          
    183          /*********************************************************************
    184          * LOCAL FUNCTIONS
    185          */
    186          
    187          static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
    188          static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
    189          static void SerialApp_Send(void);
    190          static void SerialApp_Resp(void);
    191          static void SerialApp_CallBack(uint8 port, uint8 event);
    192          
    193          static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
    194          static void AfSendAddrInfo(void);
    195          static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
    196          static void SerialApp_SendPeriodicMessage( void );
    197          static uint8 GetDataLen(uint8 fc);
    198          static uint8 GetLamp( void );
    199          static uint8 GetGas( void );
    200          static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
    201          uint8 SendData(uint8 addr, uint8 FC);
    202          
    203          /*********************************************************************
    204          * @fn      
    205          *
    206          * @brief  
    207          *
    208          * @param   
    209          *
    210          * @return  
    211          *************************************************************************/
    212          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          void Init_Wifi(void)
   \                     Init_Wifi:
    214          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    215          
    216            HalLcdWriteString( "initwifi", HAL_LCD_LINE_2 );      
   \   000004                ; Setup parameters for call to function HalLcdWriteString
   \   000004   7902         MOV     R1,#0x2
   \   000006   7A..         MOV     R2,#`?<Constant "initwifi">` & 0xff
   \   000008   7B..         MOV     R3,#(`?<Constant "initwifi">` >> 8) & 0xff
   \   00000A   12....       LCALL   ??HalLcdWriteString?relay
    217           
    218            HalUARTWrite(UART0, "AT+CIPMUX=1\r\n", 12);
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D   7C0C         MOV     R4,#0xc
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7A..         MOV     R2,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   000013   7B..         MOV     R3,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   000015   12....       LCALL   ?Subroutine3 & 0xFFFF
    219            Delay_ms(500);
    220            tasksteps=STEP2;
   \                     ??CrossCallReturnLabel_0:
   \   000018   7401         MOV     A,#0x1
   \   00001A   F0           MOVX    @DPTR,A
    221          
    222          } 
   \   00001B   D083         POP     DPH
   \   00001D   D082         POP     DPL
   \   00001F   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function Delay_ms
   \   000005                ; Setup parameters for call to function Delay_ms
   \   000005   7AF4         MOV     R2,#-0xc
   \   000007   7B01         MOV     R3,#0x1
   \   000009   12....       LCALL   ??Delay_ms?relay
   \   00000C   90....       MOV     DPTR,#tasksteps
   \   00000F   22           RET
    223          
    224          //³õÊ¼»¯´®¿Ú0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          void initUART0(void)
   \                     initUART0:
    226          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    227             //´®¿Ú
    228                CLKCONCMD &= ~0x40;                         //ÉèÖÃÏµÍ³Ê±ÖÓÔ´Îª32MHZ¾§Õñ
   \   000000   53C6BF       ANL     0xc6,#0xbf
    229                while(CLKCONSTA & 0x40);                    //µÈ´ı¾§ÕñÎÈ¶¨
   \                     ??initUART0_0:
   \   000003   E59E         MOV     A,0x9e
   \   000005   A2E6         MOV     C,0xE0 /* A   */.6
   \   000007   40FA         JC      ??initUART0_0
    230                CLKCONCMD &= ~0x47;                         //ÉèÖÃÏµÍ³Ö÷Ê±ÖÓÆµÂÊÎª32MHZ
   \   000009   53C6B8       ANL     0xc6,#0xb8
    231            
    232                PERCFG = 0x00;	//Î»ÖÃ1 P0 ¿Ú
   \   00000C   75F100       MOV     0xf1,#0x0
    233                P0SEL = 0x0c;	//P0_2,P0_3ÓÃ×÷´®¿Ú£¨Íâ²¿Éè±¸¹¦ÄÜ£©
   \   00000F   75F30C       MOV     0xf3,#0xc
    234                P2DIR &= ~0XC0; //P0ÓÅÏÈ×÷ÎªUART0
   \   000012   53FF3F       ANL     0xff,#0x3f
    235          
    236                U0CSR |= 0x80;	//ÉèÖÃÎªUART·½Ê½
   \   000015   438680       ORL     0x86,#0x80
    237                
    238                U0GCR |= 11;
   \   000018   43C50B       ORL     0xc5,#0xb
    239                U0BAUD |= 216;	//²¨ÌØÂÊÉèÎª115200 ¸ù¾İÉÏÃæ±íÖĞ»ñµÃµÄÊı¾İ
   \   00001B   43C2D8       ORL     0xc2,#0xd8
    240                UTX0IF = 1;	//UART0 TX ÖĞ¶Ï±êÖ¾³õÊ¼ÖÃÎ»0
   \   00001E   D2E9         SETB    0xe8.1
    241          
    242                U0CSR |= 0x40; //ÔÊĞí½ÓÊÕ
   \   000020   438640       ORL     0x86,#0x40
    243                IEN0 |= 0x84; //¿ª×ÜÖĞ¶ÏÔÊĞí½ÓÊÕÖĞ¶Ï  
   \   000023   43A884       ORL     0xa8,#0x84
    244            
    245            
    246          }
   \   000026   02....       LJMP    ?BRET
   \   000029                REQUIRE CLKCONCMD
   \   000029                REQUIRE CLKCONSTA
   \   000029                REQUIRE PERCFG
   \   000029                REQUIRE P0SEL
   \   000029                REQUIRE P2DIR
   \   000029                REQUIRE U0CSR
   \   000029                REQUIRE U0GCR
   \   000029                REQUIRE U0BAUD
   \   000029                REQUIRE _A_IRCON2
   \   000029                REQUIRE _A_IEN0
    247          
    248          
    249          
    250          /*********************************************************************
    251          * @fn      SerialApp_Init
    252          *
    253          * @brief   This is called during OSAL tasks' initialization.
    254          *
    255          * @param   task_id - the Task ID assigned by OSAL.
    256          *
    257          * @return  none
    258          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          void SerialApp_Init( uint8 task_id )
   \                     SerialApp_Init:
    260          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    261          	halUARTCfg_t uartConfig;
    262              
    263              P0SEL &= 0xEf;                  //ÉèÖÃP0.4¿ÚÎªÆÕÍ¨IO
   \   00000C   53F3EF       ANL     0xf3,#0xef
    264              P0DIR |= 0x10;                  //ÉèÖÃP0.4ÎªÊä³ö
   \   00000F   43FD10       ORL     0xfd,#0x10
    265              LAMP_PIN = 0;                   //¸ßµçÆ½¼ÌµçÆ÷¶Ï¿ª;µÍµçÆ½¼ÌµçÆ÷ÎüºÏ
   \   000012   C284         CLR     0x80.4
    266              P0SEL &= ~0x20;                 //ÉèÖÃP0.5ÎªÆÕÍ¨IO¿Ú
   \   000014   53F3DF       ANL     0xf3,#0xdf
    267              P0DIR &= ~0x20;                 //P0.5¶¨ÒåÎªÊäÈë¿Ú
   \   000017   53FDDF       ANL     0xfd,#0xdf
    268              P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00001A   53F37F       ANL     0xf3,#0x7f
    269          	
    270          	SerialApp_TaskID = task_id;
   \   00001D   90....       MOV     DPTR,#SerialApp_TaskID
   \   000020   F0           MOVX    @DPTR,A
    271          	//SerialApp_RxSeq = 0xC3;
    272          	
    273          	afRegister( (endPointDesc_t *)&SerialApp_epDesc );
   \   000021                ; Setup parameters for call to function afRegister
   \   000021   7A..         MOV     R2,#SerialApp_epDesc & 0xff
   \   000023   7B..         MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
   \   000025   12....       LCALL   ??afRegister?relay
    274          	
    275          	RegisterForKeys( task_id );
   \   000028                ; Setup parameters for call to function RegisterForKeys
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   ??RegisterForKeys?relay
    276          	
    277          	uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    278          	uartConfig.baudRate             = SERIAL_APP_BAUD;
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   7404         MOV     A,#0x4
   \   00003B   F0           MOVX    @DPTR,A
    279          	uartConfig.flowControl          = FALSE;
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    280          	uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7440         MOV     A,#0x40
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
    281          	uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   00004E   740A         MOV     A,#0xa
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   7480         MOV     A,#-0x80
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
    282          	uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   000059   7412         MOV     A,#0x12
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   7480         MOV     A,#-0x80
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
    283          	uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   000064   7405         MOV     A,#0x5
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   7406         MOV     A,#0x6
   \   00006B   F0           MOVX    @DPTR,A
    284          	uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   00006C   7416         MOV     A,#0x16
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
    285          	uartConfig.callBackFunc         = SerialApp_CallBack;
   \   000074   741B         MOV     A,#0x1b
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   00007F   12....       LCALL   ?Subroutine5 & 0xFFFF
    286          	HalUARTOpen (UART0, &uartConfig);
   \                     ??CrossCallReturnLabel_4:
   \   000082   AA82         MOV     R2,DPL
   \   000084   AB83         MOV     R3,DPH
   \   000086   7900         MOV     R1,#0x0
   \   000088   12....       LCALL   ??HalUARTOpen?relay
    287                  ////cici
    288          #if defined(ZDO_COORDINATOR)       
    289                  
    290          #else      
    291              initUART0();
   \   00008B                ; Setup parameters for call to function initUART0
   \   00008B   12....       LCALL   ??initUART0?relay
    292          #endif
    293              
    294          #if defined ( LCD_SUPPORTED )
    295          	HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
   \   00008E                ; Setup parameters for call to function HalLcdWriteString
   \   00008E   7902         MOV     R1,#0x2
   \   000090   7A..         MOV     R2,#`?<Constant "SerialApp">` & 0xff
   \   000092   7B..         MOV     R3,#(`?<Constant "SerialApp">` >> 8) & 0xff
   \   000094   12....       LCALL   ??HalLcdWriteString?relay
    296          #endif
    297          	//HalUARTWrite(UART0, "Init", 4);
    298                  
    299          	ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
   \   000097                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000097   7A20         MOV     R2,#0x20
   \   000099   7B80         MOV     R3,#-0x80
   \   00009B   90....       MOV     DPTR,#SerialApp_TaskID
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    300          	ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
   \   0000A3                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000A3   7A06         MOV     R2,#0x6
   \   0000A5   7B80         MOV     R3,#-0x80
   \   0000A7   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    301           //       Init_ESP8266();
    302          #if defined(ZDO_COORDINATOR)       
    303                  Init_Wifi();
    304          #else        
    305                  osal_start_timerEx( SerialApp_TaskID,
    306                                      SERIALAPP_SEND_PERIODIC_EVT,
    307                                      SERIALAPP_SEND_PERIODIC_TIMEOUT ); 
   \   0000AF                ; Setup parameters for call to function osal_start_timerEx
   \   0000AF   12....       LCALL   ?Subroutine7 & 0xFFFF
    308          #endif
    309          }
   \                     ??CrossCallReturnLabel_9:
   \   0000B2   741D         MOV     A,#0x1d
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7                REQUIRE ?Subroutine0
   \   0000B7                REQUIRE P0SEL
   \   0000B7                REQUIRE P0DIR
   \   0000B7                REQUIRE _A_P0
   \   0000B7                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7CF4         MOV     R4,#-0xc
   \   000002   7D01         MOV     R5,#0x1
   \   000004                REQUIRE ??Subroutine11_0
   \   000004                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7A03         MOV     R2,#0x3
   \   000002                REQUIRE ??Subroutine12_0
   \   000002                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SerialApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    310          
    311          /*********************************************************************
    312          * @fn      SerialApp_ProcessEvent
    313          *
    314          * @brief   Generic Application Task event processor.
    315          *
    316          * @param   task_id  - The OSAL assigned task ID.
    317          * @param   events   - Bit map of events to process.
    318          *
    319          * @return  Event flags of all unprocessed events.
    320          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
   \                     SerialApp_ProcessEvent:
    322          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    323          	(void)task_id;  // Intentionally unreferenced parameter
    324          	
    325          	if ( events & SYS_EVENT_MSG )
   \   00000E   75....       MOV     ?V0 + 6,#SerialApp_epDesc & 0xff
   \   000011   75....       MOV     ?V0 + 7,#(SerialApp_epDesc >> 8) & 0xff
   \   000014   5480         ANL     A,#0x80
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??SerialApp_ProcessEvent_0 & 0xFFFF
    326          	{
    327          		afIncomingMSGPacket_t *MSGpkt;
    328          		
    329          		while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
    330          		{
    331          			switch ( MSGpkt->hdr.event )
    332          			{
    333          			case ZDO_CB_MSG:
    334          				//SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    335          				break;
    336          				
    337          			case KEY_CHANGE:
    338          				SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    339          				break;
    340          				
    341          			case AF_INCOMING_MSG_CMD:
    342          				SerialApp_ProcessMSGCmd( MSGpkt );
    343          				break;
    344                          
    345                      case ZDO_STATE_CHANGE:
    346                        SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    347                        if ( (SerialApp_NwkState == DEV_ZB_COORD)
    348                            || (SerialApp_NwkState == DEV_ROUTER)
    349                            || (SerialApp_NwkState == DEV_END_DEVICE) )
    350                        {
    351                          #if defined(ZDO_COORDINATOR) //Ğ­µ÷Æ÷Í¨¹ı´®¿ÚÊä³ö×ÔÉí¶ÌµØÖ·¡¢IEEE  
    352                              Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    353                              Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
    354                              Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
    355                              #if UART_DEBUG           
    356                              PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
    357                              #endif 
    358                              //³õÊ¼»¯µÆµÄ×´Ì¬£¬1ÎªÏ¨Ãğ×´Ì¬£¬0ÎªµãÁÁ
    359                              NodeData[0][3] = 1;
    360                              NodeData[1][3] = 1;
    361                              NodeData[2][3] = 1;
    362                              NodeData[3][3] = 1;
    363                          #else                        //ÖÕ¶ËÎŞÏß·¢ËÍ¶ÌµØÖ·¡¢IEEE   
    364                              AfSendAddrInfo();
    365                          #endif
    366                          
    367                        }
    368                        break;				
    369          			default:
    370          				break;
    371          			}
    372          			
    373          			osal_msg_deallocate( (uint8 *)MSGpkt );
    374          		}
    375          		
    376          		return ( events ^ SYS_EVENT_MSG );
    377          	}
    378              
    379              //ÔÚ´ËÊÂ¼şÖĞ¿ÉÒÔ¶¨Ê±ÏòĞ­µ÷Æ÷·¢ËÍ½Úµã´«¸ĞÆ÷²ÎÊıĞÅÏ¢
    380              if ( events & SERIALAPP_SEND_PERIODIC_EVT )
   \   00001B   EE           MOV     A,R6
   \   00001C   5403         ANL     A,#0x3
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
    381              {
    382                  SerialApp_SendPeriodicMessage();
   \   000023                ; Setup parameters for call to function SerialApp_SendPeriodicMessage
   \   000023   12....       LCALL   ??SerialApp_SendPeriodicMessage?relay
    383                  
    384                  osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
    385                      (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000026                ; Setup parameters for call to function osal_rand
   \   000026   12....       LCALL   ??osal_rand?relay
   \   000029                ; Setup parameters for call to function osal_start_timerEx
   \   000029   EA           MOV     A,R2
   \   00002A   24F4         ADD     A,#-0xc
   \   00002C   FC           MOV     R4,A
   \   00002D   E4           CLR     A
   \   00002E   3401         ADDC    A,#0x1
   \   000030   FD           MOV     R5,A
   \   000031   12....       LCALL   ??Subroutine11_0 & 0xFFFF
    386                  
    387                  return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
   \                     ??CrossCallReturnLabel_11:
   \   000034   EE           MOV     A,R6
   \   000035   6403         XRL     A,#0x3
   \                     ??SerialApp_ProcessEvent_2:
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \                     ??SerialApp_ProcessEvent_3:
   \   000039   FB           MOV     R3,A
   \   00003A   02....       LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
    388              }
   \                     ??SerialApp_ProcessEvent_5:
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   90....       MOV     DPTR,#SerialApp_NwkState
   \   000042   F0           MOVX    @DPTR,A
   \   000043   6409         XRL     A,#0x9
   \   000045   600D         JZ      ??SerialApp_ProcessEvent_6
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6407         XRL     A,#0x7
   \   00004A   6008         JZ      ??SerialApp_ProcessEvent_6
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6406         XRL     A,#0x6
   \   00004F   6003         JZ      $+5
   \   000051   02....       LJMP    ??SerialApp_ProcessEvent_7 & 0xFFFF
   \                     ??SerialApp_ProcessEvent_6:
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AC82         MOV     R4,DPL
   \   00005C   AD83         MOV     R5,DPH
   \   00005E   7583..       MOV     DPH,#(`?<Constant {0}>_5` >> 8) & 0xff
   \   000061   7582..       MOV     DPL,#`?<Constant {0}>_5` & 0xff
   \   000064   740B         MOV     A,#0xb
   \   000066   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000069   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00006C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006C   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   743B         MOV     A,#0x3b
   \   000077   F0           MOVX    @DPTR,A
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   EB           MOV     A,R3
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   EA           MOV     A,R2
   \   000085   F0           MOVX    @DPTR,A
   \   000086                ; Setup parameters for call to function osal_memcpy
   \   000086                ; Setup parameters for call to function NLME_GetExtAddr
   \   000086   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000089   8A..         MOV     ?V0 + 0,R2
   \   00008B   8B..         MOV     ?V0 + 1,R3
   \   00008D   75..00       MOV     ?V0 + 2,#0x0
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C08         MOV     R4,#0x8
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7406         MOV     A,#0x6
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4                ; Setup parameters for call to function AF_DataRequest
   \   0000A4   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   0000AF   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   8582..       MOV     ?V0 + 0,DPL
   \   0000BF   8583..       MOV     ?V0 + 1,DPH
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   75..0B       MOV     ?V0 + 0,#0xb
   \   0000CA   75..00       MOV     ?V0 + 1,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   75..01       MOV     ?V0 + 0,#0x1
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7900         MOV     R1,#0x0
   \   0000DC   AC..         MOV     R4,?V0 + 6
   \   0000DE   AD..         MOV     R5,?V0 + 7
   \   0000E0   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??SerialApp_ProcessEvent_7:
   \   0000E6                ; Setup parameters for call to function osal_msg_deallocate
   \   0000E6   AA..         MOV     R2,?V0 + 4
   \   0000E8   AB..         MOV     R3,?V0 + 5
   \   0000EA   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??SerialApp_ProcessEvent_0:
   \   0000ED                ; Setup parameters for call to function osal_msg_receive
   \   0000ED   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   12....       LCALL   ??osal_msg_receive?relay
   \   0000F5   8A..         MOV     ?V0 + 4,R2
   \   0000F7   8B..         MOV     ?V0 + 5,R3
   \   0000F9   EA           MOV     A,R2
   \   0000FA   45..         ORL     A,?V0 + 5
   \   0000FC   602E         JZ      ??SerialApp_ProcessEvent_8
   \   0000FE   8A82         MOV     DPL,R2
   \   000100   8B83         MOV     DPH,R3
   \   000102   E0           MOVX    A,@DPTR
   \   000103   24E6         ADD     A,#-0x1a
   \   000105   6020         JZ      ??SerialApp_ProcessEvent_9
   \   000107   245A         ADD     A,#0x5a
   \   000109   6009         JZ      ??SerialApp_ProcessEvent_10
   \   00010B   24EF         ADD     A,#-0x11
   \   00010D   7003         JNZ     $+5
   \   00010F   02....       LJMP    ??SerialApp_ProcessEvent_5 & 0xFFFF
   \   000112   80D2         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_10:
   \   000114                ; Setup parameters for call to function SerialApp_HandleKeys
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FA           MOV     R2,A
   \   000119   85..82       MOV     DPL,?V0 + 4
   \   00011C   8B83         MOV     DPH,R3
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   12....       LCALL   ??SerialApp_HandleKeys?relay
   \   000125   80BF         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_9:
   \   000127                ; Setup parameters for call to function SerialApp_ProcessMSGCmd
   \   000127   12....       LCALL   ??SerialApp_ProcessMSGCmd?relay
   \   00012A   80BA         SJMP    ??SerialApp_ProcessEvent_7
   \                     ??SerialApp_ProcessEvent_8:
   \   00012C   EE           MOV     A,R6
   \   00012D   FA           MOV     R2,A
   \   00012E   EF           MOV     A,R7
   \   00012F   6480         XRL     A,#0x80
   \   000131   02....       LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
    389              
    390          	if ( events & SERIALAPP_SEND_EVT )
   \                     ??SerialApp_ProcessEvent_1:
   \   000134   EE           MOV     A,R6
   \   000135   A2E0         MOV     C,0xE0 /* A   */.0
   \   000137   5009         JNC     ??SerialApp_ProcessEvent_11
    391          	{
    392          		SerialApp_Send();
   \   000139                ; Setup parameters for call to function SerialApp_Send
   \   000139   12....       LCALL   ??SerialApp_Send?relay
    393          		return ( events ^ SERIALAPP_SEND_EVT );
   \   00013C   EE           MOV     A,R6
   \   00013D   6401         XRL     A,#0x1
   \   00013F   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    394          	}
    395          	
    396          	if ( events & SERIALAPP_RESP_EVT )
   \                     ??SerialApp_ProcessEvent_11:
   \   000142   5402         ANL     A,#0x2
   \   000144   6056         JZ      ??SerialApp_ProcessEvent_12
    397          	{
    398          		SerialApp_Resp();
   \   000146                ; Setup parameters for call to function AF_DataRequest
   \   000146   75..1E       MOV     ?V0 + 0,#0x1e
   \   000149   78..         MOV     R0,#?V0 + 0
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014E   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   000151   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   75....       MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
   \   00015C   75....       MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
   \   00015F   78..         MOV     R0,#?V0 + 0
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   75..04       MOV     ?V0 + 0,#0x4
   \   000167   75..00       MOV     ?V0 + 1,#0x0
   \   00016A   78..         MOV     R0,#?V0 + 0
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..02       MOV     ?V0 + 0,#0x2
   \   000172   78..         MOV     R0,#?V0 + 0
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000177   7900         MOV     R1,#0x0
   \   000179   AC..         MOV     R4,?V0 + 6
   \   00017B   AD..         MOV     R5,?V0 + 7
   \   00017D   7A..         MOV     R2,#SerialApp_RxAddr & 0xff
   \   00017F   7B..         MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
   \   000181   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000184   12....       LCALL   ?DEALLOC_XSTACK8
   \   000187   E9           MOV     A,R1
   \   000188   600C         JZ      ??SerialApp_ProcessEvent_13
   \   00018A                ; Setup parameters for call to function osal_set_event
   \   00018A   7A02         MOV     R2,#0x2
   \   00018C   7B00         MOV     R3,#0x0
   \   00018E   90....       MOV     DPTR,#SerialApp_TaskID
   \   000191   E0           MOVX    A,@DPTR
   \   000192   F9           MOV     R1,A
   \   000193   12....       LCALL   ??osal_set_event?relay
    399          		return ( events ^ SERIALAPP_RESP_EVT );
   \                     ??SerialApp_ProcessEvent_13:
   \   000196   EE           MOV     A,R6
   \   000197   6402         XRL     A,#0x2
   \   000199   02....       LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
    400          	}
    401          	
    402          	return ( 0 ); 
   \                     ??SerialApp_ProcessEvent_12:
   \   00019C   7A00         MOV     R2,#0x0
   \   00019E   7B00         MOV     R3,#0x0
   \                     ??SerialApp_ProcessEvent_4:
   \   0001A0   740B         MOV     A,#0xb
   \   0001A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A5                REQUIRE ?Subroutine1
   \   0001A5                ; // Fall through to label ?Subroutine1
    403          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    404          
    405          /*********************************************************************
    406          * @fn      SerialApp_HandleKeys
    407          *
    408          * @brief   Handles all key events for this device.
    409          *
    410          * @param   shift - true if in shift/alt.
    411          * @param   keys  - bit field for key events.
    412          *
    413          * @return  none
    414          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void SerialApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SerialApp_HandleKeys:
    416          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    417          	zAddrType_t txAddr;
    418          	
    419              if ( keys & HAL_KEY_SW_6 ) //°´S1¼üÆô¶¯»òÍ£Ö¹ÖÕ¶Ë¶¨Ê±ÉÏ±¨Êı¾İ 
   \   00000C   A2E5         MOV     C,0xE0 /* A   */.5
   \   00000E   5027         JNC     ??SerialApp_HandleKeys_0
    420              {
    421                if(SendFlag == 0)
   \   000010   90....       MOV     DPTR,#SendFlag
   \   000013   E0           MOVX    A,@DPTR
   \   000014   700D         JNZ     ??SerialApp_HandleKeys_1
    422                  {
    423                  SendFlag = 1;
   \   000016   7401         MOV     A,#0x1
   \   000018   F0           MOVX    @DPTR,A
    424                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   FA           MOV     R2,A
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??HalLedSet?relay
    425                  osal_start_timerEx( SerialApp_TaskID,
    426                                      SERIALAPP_SEND_PERIODIC_EVT,
    427                                      SERIALAPP_SEND_PERIODIC_TIMEOUT );
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   12....       LCALL   ?Subroutine7 & 0xFFFF
    428                  }
   \                     ??CrossCallReturnLabel_10:
   \   000021   8014         SJMP    ??SerialApp_HandleKeys_0
    429                  else
    430                  {      
    431                      SendFlag = 0;
   \                     ??SerialApp_HandleKeys_1:
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
    432                      HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   FA           MOV     R2,A
   \   000026   7901         MOV     R1,#0x1
   \   000028   12....       LCALL   ??HalLedSet?relay
    433                      osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
   \   00002B                ; Setup parameters for call to function osal_stop_timerEx
   \   00002B   7A03         MOV     R2,#0x3
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   90....       MOV     DPTR,#SerialApp_TaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_stop_timerEx?relay
    434                  }
    435              }
    436              
    437              if ( keys & HAL_KEY_SW_1 ) //°´S2
   \                     ??SerialApp_HandleKeys_0:
   \   000037   EF           MOV     A,R7
   \   000038   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003A   500A         JNC     ??SerialApp_HandleKeys_2
    438              {
    439                  LAMP_PIN = ~LAMP_PIN;
   \   00003C   D2F0         SETB    B.0
   \   00003E   A284         MOV     C,0x80.4
   \   000040   30F001       JNB     B.0,??SerialApp_HandleKeys_3
   \   000043   B3           CPL     C
   \                     ??SerialApp_HandleKeys_3:
   \   000044   9284         MOV     0x80.4,C
    440              }
    441              
    442              if ( keys & HAL_KEY_SW_2 )
   \                     ??SerialApp_HandleKeys_2:
   \   000046   75....       MOV     ?V0 + 0,#SerialApp_ClusterList & 0xff
   \   000049   75....       MOV     ?V0 + 1,#(SerialApp_ClusterList >> 8) & 0xff
   \   00004C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00004E   5059         JNC     ??SerialApp_HandleKeys_4
    443              {
    444                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000050                ; Setup parameters for call to function HalLedSet
   \   000050   7A00         MOV     R2,#0x0
   \   000052   7908         MOV     R1,#0x8
   \   000054   12....       LCALL   ??HalLedSet?relay
    445                  
    446                  // Initiate an End Device Bind Request for the mandatory endpoint
    447                  txAddr.addrMode = Addr16Bit;
   \   000057   7408         MOV     A,#0x8
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?Subroutine5 & 0xFFFF
    448                  txAddr.addr.shortAddr = 0x0000; // Coordinator
   \                     ??CrossCallReturnLabel_5:
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   F0           MOVX    @DPTR,A
    449                  ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
    450                      SerialApp_epDesc.endPoint,
    451                      SERIALAPP_PROFID,
    452                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    453                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    454                      FALSE );
   \   000065                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000065   F5..         MOV     ?V0 + 2,A
   \   000067   78..         MOV     R0,#?V0 + 2
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   75..02       MOV     ?V0 + 2,#0x2
   \   000074   78..         MOV     R0,#?V0 + 2
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   75..05       MOV     ?V0 + 2,#0x5
   \   000086   75..0F       MOV     ?V0 + 3,#0xf
   \   000089   78..         MOV     R0,#?V0 + 2
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000091   EA           MOV     A,R2
   \   000092   FC           MOV     R4,A
   \   000093   EB           MOV     A,R3
   \   000094   FD           MOV     R5,A
   \   000095   740B         MOV     A,#0xb
   \   000097   F9           MOV     R1,A
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   AA82         MOV     R2,DPL
   \   00009F   AB83         MOV     R3,DPH
   \   0000A1   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   0000A4   7409         MOV     A,#0x9
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    455              }
    456              
    457              if ( keys & HAL_KEY_SW_3 )
    458              {
    459              }
    460              
    461              if ( keys & HAL_KEY_SW_4 )
   \                     ??SerialApp_HandleKeys_4:
   \   0000A9   EF           MOV     A,R7
   \   0000AA   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000AC   5052         JNC     ??SerialApp_HandleKeys_5
    462              {
    463                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   0000AE                ; Setup parameters for call to function HalLedSet
   \   0000AE   7A00         MOV     R2,#0x0
   \   0000B0   7908         MOV     R1,#0x8
   \   0000B2   12....       LCALL   ??HalLedSet?relay
    464                  
    465                  // Initiate a Match Description Request (Service Discovery)
    466                  txAddr.addrMode = AddrBroadcast;
   \   0000B5   7408         MOV     A,#0x8
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   740F         MOV     A,#0xf
   \   0000BC   12....       LCALL   ?Subroutine5 & 0xFFFF
    467                  txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \                     ??CrossCallReturnLabel_6:
   \   0000BF   74FF         MOV     A,#-0x1
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
    468                  ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
    469                      SERIALAPP_PROFID,
    470                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    471                      SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
    472                      FALSE );
   \   0000C4                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000C4   75..00       MOV     ?V0 + 2,#0x0
   \   0000C7   78..         MOV     R0,#?V0 + 2
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   78..         MOV     R0,#?V0 + 0
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   75..02       MOV     ?V0 + 2,#0x2
   \   0000D4   78..         MOV     R0,#?V0 + 2
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D9   78..         MOV     R0,#?V0 + 0
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   75..05       MOV     ?V0 + 0,#0x5
   \   0000E1   75..0F       MOV     ?V0 + 1,#0xf
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E9   7902         MOV     R1,#0x2
   \   0000EB   7CFF         MOV     R4,#-0x1
   \   0000ED   7DFF         MOV     R5,#-0x1
   \   0000EF   7408         MOV     A,#0x8
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   AA82         MOV     R2,DPL
   \   0000F6   AB83         MOV     R3,DPH
   \   0000F8   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000FB   7408         MOV     A,#0x8
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
    473              }
    474          
    475          }
   \                     ??SerialApp_HandleKeys_5:
   \   000100   7409         MOV     A,#0x9
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   7F04         MOV     R7,#0x4
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00010A                REQUIRE _A_P0
    476          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
   \                     SerialApp_ProcessMSGCmd:
    478          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    479              uint16 shortAddr;
                            ^
Warning[Pe177]: variable "shortAddr" was declared but never referenced
    480              uint8 *pIeeeAddr; 
                            ^
Warning[Pe177]: variable "pIeeeAddr" was declared but never referenced
    481              uint8 delay;
    482              uint8 afRxData[30]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    483          
    484              
    485              
    486          	//²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓĞ´«¸ĞÆ÷µÄÊı¾İ 3A 00 01 02 39 23  ÏìÓ¦£º3A 00 01 02 00 00 00 00 xor 23
    487          	switch ( pkt->clusterId )
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V0 + 1,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
   \   000037   0100         DW        1
   \   000039   01           DB        1
   \   00003A   ....         DW        ??CrossCallReturnLabel_12
   \   00003C   ....         DW        ??SerialApp_ProcessMSGCmd_0
   \   00003E   ....         DW        ??SerialApp_ProcessMSGCmd_1
    488          	{
    489          	// A message with a serial data block to be transmitted on the serial port.
    490          	case SERIALAPP_CLUSTERID:
    491                  osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SerialApp_ProcessMSGCmd_0:
   \   000040   EA           MOV     A,R2
   \   000041   241F         ADD     A,#0x1f
   \   000043   FE           MOV     R6,A
   \   000044   EB           MOV     A,R3
   \   000045   3400         ADDC    A,#0x0
   \   000047   FF           MOV     R7,A
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 1,A
   \   000051   75..00       MOV     ?V0 + 2,#0x0
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FC           MOV     R4,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FD           MOV     R5,A
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
    492                  
    493                  #if defined(ZDO_COORDINATOR)
    494                  #else 
    495                      HalUARTWrite (UART0, afRxData, pkt->cmd.DataLength); //µ÷ÊÔÊ±Í¨¹ı´®¿ÚÊä³ö
   \   00006D                ; Setup parameters for call to function HalUARTWrite
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FC           MOV     R4,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FD           MOV     R5,A
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   7900         MOV     R1,#0x0
   \   000082   12....       LCALL   ??HalUARTWrite?relay
    496                  #endif    
    497          		switch(afRxData[0]) //¼òµ¥Ğ­ÒéÃüÁî×Ö½âÎö
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   643A         XRL     A,#0x3a
   \   00008E   6003         JZ      $+5
   \   000090   02....       LJMP    ??CrossCallReturnLabel_12 & 0xFFFF
    498          		{
    499          #if defined(ZDO_COORDINATOR)
    500          		case 0x3B:  //ÊÕµ½ÖÕ¶ËÎŞÏß·¢¹ıÀ´µÄ¶ÌµØÖ·ºÍIEEEµØÖ·,Í¨¹ı´®¿ÚÊä³öÏÔÊ¾      
    501          			shortAddr=(afRxData[1]<<8)|afRxData[2];
    502          			pIeeeAddr = &afRxData[3];
    503                      #if UART_DEBUG
    504          			PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
    505                      #endif   
    506          			break;
    507          		case 0x3A:	
    508                      if(afRxData[3] == 0x02) //ÊÕµ½ÖÕ¶Ë´«¹ıÀ´µÄ´«¸ĞÆ÷Êı¾İ²¢±£´æ
    509                      {  
    510                          NodeData[afRxData[2]-1][0] = afRxData[4];
    511                          NodeData[afRxData[2]-1][1] = afRxData[5];
    512                          NodeData[afRxData[2]-1][2] = afRxData[6];
    513                          NodeData[afRxData[2]-1][3] = afRxData[7];
    514                          NodeData[afRxData[2]-1][4] = 0x00;
    515                          
    516           /////////////////////////////cici////*******************************////////////////               
    517                          //Ğ­µ÷Æ÷²É¼¯µÄÊı¾İ ´ı·¢ËÍ
    518                        osal_memset(Data_Report,0x00,30);
    519                        osal_memcpy(Data_Report, afRxData, 30); 
    520          
    521                        osal_memset(afRxData,0x00,30);
    522          //////////////////**************************************/////////////////////////////////
    523                        }
    524                     ///////////////////////////////////////////////   
    525                      
    526                  #if UART_DEBUG
    527                      HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //µ÷ÊÔÊ±Í¨¹ı´®¿ÚÊä³ö
    528                      HalUARTWrite (UART0, "\n", 1);
    529                  #endif            
    530                     break;
    531          #else  
    532          		case 0x3A:  //¿ª¹ØµÆÉè±¸          
    533                  if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //¿ØÖÆÖÕ¶Ë          
   \   000093   7403         MOV     A,#0x3
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   740A         MOV     A,#0xa
   \   00009C   68           XRL     A,R0
   \   00009D   600A         JZ      ??SerialApp_ProcessMSGCmd_2
   \   00009F   740B         MOV     A,#0xb
   \   0000A1   68           XRL     A,R0
   \   0000A2   6005         JZ      ??SerialApp_ProcessMSGCmd_2
   \   0000A4   740C         MOV     A,#0xc
   \   0000A6   68           XRL     A,R0
   \   0000A7   706B         JNZ     ??CrossCallReturnLabel_12
    534                  {  
    535          			if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
   \                     ??SerialApp_ProcessMSGCmd_2:
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   90....       MOV     DPTR,#EndDeviceID
   \   0000B3   88..         MOV     ?V0 + 0,R0
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   65..         XRL     A,?V0 + 0
   \   0000B8   7002         JNZ     ??SerialApp_ProcessMSGCmd_3
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \                     ??SerialApp_ProcessMSGCmd_3:
   \   0000BC   6005         JZ      ??SerialApp_ProcessMSGCmd_4
   \   0000BE   74FF         MOV     A,#-0x1
   \   0000C0   68           XRL     A,R0
   \   0000C1   7051         JNZ     ??CrossCallReturnLabel_12
    536          			{
    537          				if(afRxData[4] == 0)
   \                     ??SerialApp_ProcessMSGCmd_4:
   \   0000C3   7404         MOV     A,#0x4
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   7004         JNZ     ??SerialApp_ProcessMSGCmd_5
    538                          {
    539                              LAMP_PIN = 1;
   \   0000CB   D284         SETB    0x80.4
   \   0000CD   8045         SJMP    ??CrossCallReturnLabel_12
    540          				//	HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    541                          }
    542          				else
    543                          {
    544                              LAMP_PIN = 0;
   \                     ??SerialApp_ProcessMSGCmd_5:
   \   0000CF   C284         CLR     0x80.4
   \   0000D1   8041         SJMP    ??CrossCallReturnLabel_12
    545          				//	HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    546                          }
    547          			}
    548          			break;
    549                  }		
    550          #endif
    551                  default :
    552                      break;
    553                  }
    554                  break;
    555          		// A response to a received serial data block.
    556          		case SERIALAPP_CLUSTERID2:
    557          			if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
    558          				((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
   \                     ??SerialApp_ProcessMSGCmd_1:
   \   0000D3   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000D6   F8           MOV     R0,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F9           MOV     R1,A
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FA           MOV     R2,A
   \   0000E1   90....       MOV     DPTR,#SerialApp_TxSeq
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6A           XRL     A,R2
   \   0000E6   701D         JNZ     ??SerialApp_ProcessMSGCmd_6
   \   0000E8   8882         MOV     DPL,R0
   \   0000EA   8983         MOV     DPH,R1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   6004         JZ      ??SerialApp_ProcessMSGCmd_7
   \   0000EF   6401         XRL     A,#0x1
   \   0000F1   7012         JNZ     ??SerialApp_ProcessMSGCmd_6
    559          			{
    560          				SerialApp_TxLen = 0;
   \                     ??SerialApp_ProcessMSGCmd_7:
   \   0000F3   90....       MOV     DPTR,#SerialApp_TxLen
   \   0000F6   E4           CLR     A
   \   0000F7   F0           MOVX    @DPTR,A
    561          				osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
   \   0000F8                ; Setup parameters for call to function osal_stop_timerEx
   \   0000F8   7A01         MOV     R2,#0x1
   \   0000FA   FB           MOV     R3,A
   \   0000FB   90....       MOV     DPTR,#SerialApp_TaskID
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   12....       LCALL   ??osal_stop_timerEx?relay
   \   000103   800F         SJMP    ??CrossCallReturnLabel_12
    562          			}
    563          			else
    564          			{
    565          				// Re-start timeout according to delay sent from other device.
    566          				delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
    567          				osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
   \                     ??SerialApp_ProcessMSGCmd_6:
   \   000105                ; Setup parameters for call to function osal_start_timerEx
   \   000105   8882         MOV     DPL,R0
   \   000107   8983         MOV     DPH,R1
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FC           MOV     R4,A
   \   00010D   7D00         MOV     R5,#0x0
   \   00010F   7A01         MOV     R2,#0x1
   \   000111   12....       LCALL   ??Subroutine12_0 & 0xFFFF
    568          			}
    569          			break;
    570          			
    571          		default:
    572          			break;
    573          	}
    574          }
   \                     ??CrossCallReturnLabel_12:
   \   000114   741E         MOV     A,#0x1e
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   \   000119   7F03         MOV     R7,#0x3
   \   00011B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00011E                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV     A,R2
   \   000001   2421         ADD     A,#0x21
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    575          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    576          uint8 TxBuffer[128];
   \                     TxBuffer:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z
    577          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    578          uint8 SendData(uint8 addr, uint8 FC)
   \                     SendData:
    579          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 7,R1
   \   000007   8A..         MOV     ?V0 + 3,R2
    580          	uint8 ret, i, index=4;
   \   000009   75..04       MOV     ?V0 + 2,#0x4
    581          
    582                  osal_memset(TxBuffer,0x00,128);
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C80         MOV     R4,#-0x80
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   7A..         MOV     R2,#TxBuffer & 0xff
   \   000014   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000016   12....       LCALL   ??osal_memset?relay
    583                  
    584          	TxBuffer[0] = 0x3A;
   \   000019   90....       MOV     DPTR,#TxBuffer
   \   00001C   743A         MOV     A,#0x3a
   \   00001E   F0           MOVX    @DPTR,A
    585          	TxBuffer[1] = 0x00;
   \   00001F   A3           INC     DPTR
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
    586          	TxBuffer[2] = addr;
   \   000022   E5..         MOV     A,?V0 + 7
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    587          	TxBuffer[3] = FC;
   \   000026   E5..         MOV     A,?V0 + 3
   \   000028   A3           INC     DPTR
   \   000029   F0           MOVX    @DPTR,A
    588          
    589          	switch(FC)
   \   00002A   14           DEC     A
   \   00002B   6006         JZ      ??SendData_0
   \   00002D   14           DEC     A
   \   00002E   607D         JZ      ??SendData_1
   \   000030   02....       LJMP    ??SendData_2 & 0xFFFF
    590          	{
    591          	case 0x01: //²éÑ¯ËùÓĞÖÕ¶Ë´«¸ĞÆ÷µÄÊı¾İ
    592          		for (i=0; i<MAX_NODE; i++)
   \                     ??SendData_0:
   \   000033   7E00         MOV     R6,#0x0
    593          		{
    594          			osal_memcpy(&TxBuffer[index], NodeData[i], 4);
   \                     ??SendData_3:
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   EE           MOV     A,R6
   \   000036   75F005       MOV     B,#0x5
   \   000039   A4           MUL     AB
   \   00003A   F8           MOV     R0,A
   \   00003B   A9F0         MOV     R1,B
   \   00003D   74..         MOV     A,#NodeData & 0xff
   \   00003F   28           ADD     A,R0
   \   000040   F5..         MOV     ?V0 + 4,A
   \   000042   74..         MOV     A,#(NodeData >> 8) & 0xff
   \   000044   39           ADDC    A,R1
   \   000045   F5..         MOV     ?V0 + 5,A
   \   000047   75..00       MOV     ?V0 + 6,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004F   7C04         MOV     R4,#0x4
   \   000051   7D00         MOV     R5,#0x0
   \   000053   85....       MOV     ?V0 + 0,?V0 + 2
   \   000056   74..         MOV     A,#TxBuffer & 0xff
   \   000058   25..         ADD     A,?V0 + 0
   \   00005A   FA           MOV     R2,A
   \   00005B   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
    595          			index += 4;
   \   000066   7404         MOV     A,#0x4
   \   000068   25..         ADD     A,?V0 + 2
   \   00006A   F5..         MOV     ?V0 + 2,A
    596          		}
   \   00006C   0E           INC     R6
   \   00006D   EE           MOV     A,R6
   \   00006E   C3           CLR     C
   \   00006F   9404         SUBB    A,#0x4
   \   000071   40C2         JC      ??SendData_3
    597          		TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   000073   85..82       MOV     DPL,?V0 + 2
   \   000076   AE82         MOV     R6,DPL
   \   000078   74..         MOV     A,#TxBuffer & 0xff
   \   00007A   2E           ADD     A,R6
   \   00007B   F5..         MOV     ?V0 + 0,A
   \   00007D   74..         MOV     A,#(TxBuffer >> 8) & 0xff
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F5..         MOV     ?V0 + 1,A
   \   000083                ; Setup parameters for call to function XorCheckSum
   \   000083   A9..         MOV     R1,?V0 + 2
   \   000085   7A..         MOV     R2,#TxBuffer & 0xff
   \   000087   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   000089   12....       LCALL   ??XorCheckSum?relay
   \   00008C   E9           MOV     A,R1
   \   00008D   85..82       MOV     DPL,?V0 + 0
   \   000090   85..83       MOV     DPH,?V0 + 1
   \   000093   F0           MOVX    @DPTR,A
    598          		TxBuffer[index+1] = 0x23; 
   \   000094   A3           INC     DPTR
   \   000095   7423         MOV     A,#0x23
   \   000097   F0           MOVX    @DPTR,A
    599          		
    600          		HalUARTWrite(UART0, TxBuffer, index+2);
   \   000098                ; Setup parameters for call to function HalUARTWrite
   \   000098   EE           MOV     A,R6
   \   000099   2402         ADD     A,#0x2
   \   00009B   FC           MOV     R4,A
   \   00009C   E4           CLR     A
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   FD           MOV     R5,A
   \                     ??SendData_4:
   \   0000A0   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000A2   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000A4   7900         MOV     R1,#0x0
   \   0000A6   12....       LCALL   ??HalUARTWrite?relay
    601                  ret = 1;
   \   0000A9   7901         MOV     R1,#0x1
    602          		break;
   \   0000AB   8043         SJMP    ??SendData_5
    603          	case 0x02: //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓĞ´«¸ĞÆ÷µÄÊı¾İ
    604          		osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
   \                     ??SendData_1:
   \   0000AD                ; Setup parameters for call to function osal_memcpy
   \   0000AD   E5..         MOV     A,?V0 + 7
   \   0000AF   75F005       MOV     B,#0x5
   \   0000B2   A4           MUL     AB
   \   0000B3   F8           MOV     R0,A
   \   0000B4   A9F0         MOV     R1,B
   \   0000B6   74..         MOV     A,#(NodeData + 251) & 0xff
   \   0000B8   28           ADD     A,R0
   \   0000B9   F5..         MOV     ?V0 + 0,A
   \   0000BB   74..         MOV     A,#((NodeData - 5) >> 8) & 0xff
   \   0000BD   39           ADDC    A,R1
   \   0000BE   F5..         MOV     ?V0 + 1,A
   \   0000C0   75..00       MOV     ?V0 + 2,#0x0
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C8   7C04         MOV     R4,#0x4
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   7A..         MOV     R2,#(TxBuffer + 4) & 0xff
   \   0000CE   7B..         MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
   \   0000D0   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
    605          		index += 4;
    606          		TxBuffer[index] = XorCheckSum(TxBuffer, index);
   \   0000D6                ; Setup parameters for call to function XorCheckSum
   \   0000D6   7908         MOV     R1,#0x8
   \   0000D8   7A..         MOV     R2,#TxBuffer & 0xff
   \   0000DA   7B..         MOV     R3,#(TxBuffer >> 8) & 0xff
   \   0000DC   12....       LCALL   ??XorCheckSum?relay
   \   0000DF   E9           MOV     A,R1
   \   0000E0   90....       MOV     DPTR,#TxBuffer + 8
   \   0000E3   F0           MOVX    @DPTR,A
    607          		TxBuffer[index+1] = 0x23; 
   \   0000E4   A3           INC     DPTR
   \   0000E5   7423         MOV     A,#0x23
   \   0000E7   F0           MOVX    @DPTR,A
    608          	
    609          		HalUARTWrite(UART0, TxBuffer, index+2);		
   \   0000E8                ; Setup parameters for call to function HalUARTWrite
   \   0000E8   7C0A         MOV     R4,#0xa
   \   0000EA   7D00         MOV     R5,#0x0
   \   0000EC   80B2         SJMP    ??SendData_4
    610                  ret = 1;
    611          		break;   
    612          	default:
    613                  ret = 0;
   \                     ??SendData_2:
   \   0000EE   7900         MOV     R1,#0x0
    614          		break;
    615          	}
    616          
    617              return ret;
   \                     ??SendData_5:
   \   0000F0   02....       LJMP    ?Subroutine1 & 0xFFFF
    618          }
    619          
    620          /*********************************************************************
    621          * @fn      SerialApp_Send
    622          *
    623          * @brief   Send data OTA.
    624          *
    625          * @param   none
    626          *
    627          * @return  none
    628          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          static void SerialApp_Send(void)
   \                     SerialApp_Send:
    630          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 515
   \   000005   7582FD       MOV     DPL,#-0x3
   \   000008   7583FD       MOV     DPH,#-0x3
   \   00000B   12....       LCALL   ?ADD_XSTACK_DISP0_16
    631              uint8  addr, FC;
    632          //    uint8 checksum=0;
    633              int len=0;
    634              int i;
    635              
    636              uint8 length[3]={0};
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   AC82         MOV     R4,DPL
   \   000013   AD83         MOV     R5,DPH
   \   000015   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000018   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    637              uint8 tmpbuf[256]={0};
   \   000020   758203       MOV     DPL,#0x3
   \   000023   758301       MOV     DPH,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_16
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000030   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    638              uint8 cmd[256]={0};
   \   000036   1D           DEC     R5
   \   000037   7583..       MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
   \   00003A   7582..       MOV     DPL,#`?<Constant {0}>_3` & 0xff
   \   00003D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    639           //  char *p=NULL;
    640          	
    641          #if SERIAL_APP_LOOPBACK
    642          	if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
    643          	{
    644          		SerialApp_TxLen += HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
    645          			SERIAL_APP_TX_MAX-SerialApp_TxLen);
    646          	}
    647          	
    648          	if (SerialApp_TxLen)
    649          	{
    650          		(void)SerialApp_TxAddr;
    651          		if (HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen))
    652          		{
    653          			SerialApp_TxLen = 0;
    654          		}
    655          		else
    656          		{
    657          			osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
    658          		}
    659          	}
    660          #else
    661          	if (!SerialApp_TxLen && 
    662          		(SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
   \   000040   90....       MOV     DPTR,#SerialApp_TxLen
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6003         JZ      $+5
   \   000046   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
   \   000049                ; Setup parameters for call to function HalUARTRead
   \   000049   7C28         MOV     R4,#0x28
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   00004F   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000051   7900         MOV     R1,#0x0
   \   000053   12....       LCALL   ??HalUARTRead?relay
   \   000056   EA           MOV     A,R2
   \   000057   90....       MOV     DPTR,#SerialApp_TxLen
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??SerialApp_Send_0 & 0xFFFF
    663          	
    664                  {
    665                  if (SerialApp_TxLen)
    666                  {
    667                      
    668          //////////////////////////***********************/////////////////////////////////////////////
    669                       if(strstr((char *)SerialApp_TxBuf,"+IPD")!=NULL) //½ÓÊÕµÄÖ¸Áî
   \   000060                ; Setup parameters for call to function strstr
   \   000060   7C..         MOV     R4,#`?<Constant "+IPD">` & 0xff
   \   000062   7D..         MOV     R5,#(`?<Constant "+IPD">` >> 8) & 0xff
   \   000064   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??SerialApp_Send_1 & 0xFFFF
    670                       {
    671                         sscanf(SerialApp_TxBuf,"%*[^,]%*c%*[^,]%*c%[^:]%*c%s]",length,tmpbuf);            
                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   00006C                ; Setup parameters for call to function sscanf
   \   00006C   758203       MOV     DPL,#0x3
   \   00006F   758301       MOV     DPH,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_16
   \   000075   8582..       MOV     ?V0 + 0,DPL
   \   000078   8583..       MOV     ?V0 + 1,DPH
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   8582..       MOV     ?V0 + 0,DPL
   \   000088   8583..       MOV     ?V0 + 1,DPH
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   7C..         MOV     R4,#`?<Constant "%*[^,]%*c%*[^,]%*c%[^...">` & 0xff
   \   000092   7D..         MOV     R5,#(`?<Constant "%*[^,]%*c%*[^,]%*c%[^...">` >> 8) & 0xff
   \   000094   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000096   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000098   12....       LCALL   ??sscanf?relay
   \   00009B   7404         MOV     A,#0x4
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
    672                         len=atoi(length);
                                         ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   0000A0                ; Setup parameters for call to function atoi
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??atoi?relay
   \   0000AD   8A..         MOV     ?V0 + 0,R2
   \   0000AF   8B..         MOV     ?V0 + 1,R3
    673                         
    674                         for(i=0;i<SerialApp_TxLen;i++)
   \   0000B1   7A00         MOV     R2,#0x0
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   8008         SJMP    ??SerialApp_Send_2
   \                     ??SerialApp_Send_3:
   \   0000B7   EA           MOV     A,R2
   \   0000B8   2401         ADD     A,#0x1
   \   0000BA   0A           INC     R2
   \   0000BB   EB           MOV     A,R3
   \   0000BC   3400         ADDC    A,#0x0
   \   0000BE   FB           MOV     R3,A
   \                     ??SerialApp_Send_2:
   \   0000BF   74..         MOV     A,#SerialApp_TxBuf & 0xff
   \   0000C1   2A           ADD     A,R2
   \   0000C2   F8           MOV     R0,A
   \   0000C3   74..         MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
   \   0000C5   3B           ADDC    A,R3
   \   0000C6   F9           MOV     R1,A
   \   0000C7   90....       MOV     DPTR,#SerialApp_TxLen
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FC           MOV     R4,A
   \   0000CC   C3           CLR     C
   \   0000CD   EA           MOV     A,R2
   \   0000CE   9C           SUBB    A,R4
   \   0000CF   EB           MOV     A,R3
   \   0000D0   9400         SUBB    A,#0x0
   \   0000D2   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000D4   65D0         XRL     A,PSW
   \   0000D6   33           RLC     A
   \   0000D7   5009         JNC     ??SerialApp_Send_4
    675                         {
    676                           if(SerialApp_TxBuf[i]==':')          
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   643A         XRL     A,#0x3a
   \   0000E0   70D5         JNZ     ??SerialApp_Send_3
    677                             break;
    678                         }
    679                         
    680                         osal_memcpy(cmd,&SerialApp_TxBuf[i+1],len);
   \                     ??SerialApp_Send_4:
   \   0000E2                ; Setup parameters for call to function osal_memcpy
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   8983         MOV     DPH,R1
   \   0000E6   A3           INC     DPTR
   \   0000E7   A982         MOV     R1,DPL
   \   0000E9   AA83         MOV     R2,DPH
   \   0000EB   89..         MOV     ?V0 + 4,R1
   \   0000ED   8A..         MOV     ?V0 + 5,R2
   \   0000EF   75..00       MOV     ?V0 + 6,#0x0
   \   0000F2   78..         MOV     R0,#?V0 + 4
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F7   AC..         MOV     R4,?V0 + 0
   \   0000F9   AD..         MOV     R5,?V0 + 1
   \   0000FB   7406         MOV     A,#0x6
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
    681                         adr = cmd[2];
   \   000106   7405         MOV     A,#0x5
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   90....       MOV     DPTR,#adr
   \   00010F   F0           MOVX    @DPTR,A
    682                         fc=cmd[3];
   \   000110   7406         MOV     A,#0x6
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E0           MOVX    A,@DPTR
   \   000116   90....       MOV     DPTR,#fc
   \   000119   F0           MOVX    @DPTR,A
    683                         
    684                         HalLcdWriteString( "cmd ready....", HAL_LCD_LINE_3 );
   \   00011A                ; Setup parameters for call to function HalLcdWriteString
   \   00011A   7903         MOV     R1,#0x3
   \   00011C   7A..         MOV     R2,#`?<Constant "cmd ready....">` & 0xff
   \   00011E   7B..         MOV     R3,#(`?<Constant "cmd ready....">` >> 8) & 0xff
   \   000120   12....       LCALL   ??HalLcdWriteString?relay
    685                         
    686                         if(cmd[3]==0x0A) //¿ØÖÆÖ¸Áî ¹ã²¥³öÈ¥
   \   000123   7406         MOV     A,#0x6
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   E0           MOVX    A,@DPTR
   \   000129   F8           MOV     R0,A
   \   00012A   740A         MOV     A,#0xa
   \   00012C   68           XRL     A,R0
   \   00012D   7058         JNZ     ??SerialApp_Send_5
    687          	      {   
    688                         //½«ÊÕµ½µÄÃüÁîÍ¨¹ıÎŞÏßµÄĞÎÊ½·¢ËÍ³öÈ¥
    689                          if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
    690                                                                  (endPointDesc_t *)&SerialApp_epDesc,
    691                                                                   SERIALAPP_CLUSTERID,
    692                                                                   len, cmd,
    693                                                                   &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS)) 
   \   00012F                ; Setup parameters for call to function AF_DataRequest
   \   00012F   75..1E       MOV     ?V0 + 2,#0x1e
   \   000132   78..         MOV     R0,#?V0 + 2
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000137   75....       MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
   \   00013A   75....       MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
   \   00013D   78..         MOV     R0,#?V0 + 2
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   7406         MOV     A,#0x6
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   8582..       MOV     ?V0 + 2,DPL
   \   00014A   8583..       MOV     ?V0 + 3,DPH
   \   00014D   78..         MOV     R0,#?V0 + 2
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   78..         MOV     R0,#?V0 + 0
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000157   75..01       MOV     ?V0 + 0,#0x1
   \   00015A   75..00       MOV     ?V0 + 1,#0x0
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   7900         MOV     R1,#0x0
   \   000164   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   000166   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   000168   7A..         MOV     R2,#Broadcast_DstAddr & 0xff
   \   00016A   7B..         MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
   \   00016C   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000172   E9           MOV     A,R1
   \   000173   7045         JNZ     ??SerialApp_Send_6
    694          
    695                            {
    696                              Delay_ms(500);
   \   000175                ; Setup parameters for call to function Delay_ms
   \   000175   7AF4         MOV     R2,#-0xc
   \   000177   7B01         MOV     R3,#0x1
   \   000179   12....       LCALL   ??Delay_ms?relay
    697                              HalLcdWriteString( "cmd send[ok]....", HAL_LCD_LINE_3 );
   \   00017C                ; Setup parameters for call to function HalLcdWriteString
   \   00017C   7903         MOV     R1,#0x3
   \   00017E   7A..         MOV     R2,#`?<Constant "cmd send[ok]....">` & 0xff
   \   000180   7B..         MOV     R3,#(`?<Constant "cmd send[ok]....">` >> 8) & 0xff
   \   000182   12....       LCALL   ??HalLcdWriteString?relay
   \   000185   8033         SJMP    ??SerialApp_Send_6
    698                          
    699                            }
    700                          }
    701                        else if(cmd[3]==0x02)//²éÑ¯Ö¸Áî ÉÏ±¨Êı¾İ
   \                     ??SerialApp_Send_5:
   \   000187   7402         MOV     A,#0x2
   \   000189   68           XRL     A,R0
   \   00018A   7010         JNZ     ??SerialApp_Send_7
    702                         {
    703                              if(flag==0x00)
   \   00018C   90....       MOV     DPTR,#flag
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   7028         JNZ     ??SerialApp_Send_6
    704                              {
    705                                HalUARTWrite (UART0,"AT+CIPSEND=0,10\r\n",16);
   \   000192                ; Setup parameters for call to function HalUARTWrite
   \   000192   7C10         MOV     R4,#0x10
   \   000194   7D00         MOV     R5,#0x0
   \   000196   7A..         MOV     R2,#`?<Constant "AT+CIPSEND=0,10\\r\\n">` & 0xff
   \   000198   7B..         MOV     R3,#(`?<Constant "AT+CIPSEND=0,10\\r\\n">` >> 8) & 0xff
   \   00019A   8013         SJMP    ??SerialApp_Send_8
    706                                flag=0x01;
    707                              }
    708                       //       Delay_ms(500);
    709                         }
    710                         else if(cmd[3]==0x01)//²éÑ¯Ö¸Áî ÉÏ±¨Êı¾İ
   \                     ??SerialApp_Send_7:
   \   00019C   7401         MOV     A,#0x1
   \   00019E   68           XRL     A,R0
   \   00019F   7019         JNZ     ??SerialApp_Send_6
    711                         {
    712                              if(flag==0x00)
   \   0001A1   90....       MOV     DPTR,#flag
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   7013         JNZ     ??SerialApp_Send_6
    713                              {
    714                                HalUARTWrite (UART0,"AT+CIPSEND=0,22\r\n",16);
   \   0001A7                ; Setup parameters for call to function HalUARTWrite
   \   0001A7   7C10         MOV     R4,#0x10
   \   0001A9   7D00         MOV     R5,#0x0
   \   0001AB   7A..         MOV     R2,#`?<Constant "AT+CIPSEND=0,22\\r\\n">` & 0xff
   \   0001AD   7B..         MOV     R3,#(`?<Constant "AT+CIPSEND=0,22\\r\\n">` >> 8) & 0xff
   \                     ??SerialApp_Send_8:
   \   0001AF   7900         MOV     R1,#0x0
   \   0001B1   12....       LCALL   ??HalUARTWrite?relay
    715                                flag=0x01;
   \   0001B4   90....       MOV     DPTR,#flag
   \   0001B7   7401         MOV     A,#0x1
   \   0001B9   F0           MOVX    @DPTR,A
    716                              }
    717                       //       Delay_ms(500);
    718                         }              
    719                         
    720                                                        
    721                         HalLcdWriteString( "wait cmd....", HAL_LCD_LINE_3 );
   \                     ??SerialApp_Send_6:
   \   0001BA                ; Setup parameters for call to function HalLcdWriteString
   \   0001BA   7903         MOV     R1,#0x3
   \   0001BC   7A..         MOV     R2,#`?<Constant "wait cmd....">` & 0xff
   \   0001BE   7B..         MOV     R3,#(`?<Constant "wait cmd....">` >> 8) & 0xff
   \   0001C0   02....       LJMP    ??SerialApp_Send_9 & 0xFFFF
    722                         
    723                         
    724                       }        
    725                        //    sprintf(Recdata,"%s",SerialApp_TxBuf); ////????
    726                       //     HalLcdWriteString( Recdata, HAL_LCD_LINE_2 );
    727                       else if((strstr(&SerialApp_TxBuf[1],"OK")!=NULL)||(strstr(&SerialApp_TxBuf[1],"no change")!=NULL))
                                              ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

               else if((strstr(&SerialApp_TxBuf[1],"OK")!=NULL)||(strstr(&SerialApp_TxBuf[1],"no change")!=NULL))
                                                                         ^
"E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",727  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??SerialApp_Send_1:
   \   0001C3                ; Setup parameters for call to function strstr
   \   0001C3   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   0001C5   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   0001C7   7A..         MOV     R2,#(SerialApp_TxBuf + 1) & 0xff
   \   0001C9   7B..         MOV     R3,#((SerialApp_TxBuf + 1) >> 8) & 0xff
   \   0001CB   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001CE   700D         JNZ     ??SerialApp_Send_10
   \   0001D0                ; Setup parameters for call to function strstr
   \   0001D0   7C..         MOV     R4,#`?<Constant "no change">` & 0xff
   \   0001D2   7D..         MOV     R5,#(`?<Constant "no change">` >> 8) & 0xff
   \   0001D4   7A..         MOV     R2,#(SerialApp_TxBuf + 1) & 0xff
   \   0001D6   7B..         MOV     R3,#((SerialApp_TxBuf + 1) >> 8) & 0xff
   \   0001D8   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001DB   6036         JZ      ??SerialApp_Send_11
    728                       {
    729                             if(tasksteps == STEP2)
   \                     ??SerialApp_Send_10:
   \   0001DD   90....       MOV     DPTR,#tasksteps
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   6401         XRL     A,#0x1
   \   0001E3   7019         JNZ     ??SerialApp_Send_12
    730                             {                     
    731                               HalLcdWriteString( "CIPMUX...[ok].", HAL_LCD_LINE_2 );
   \   0001E5                ; Setup parameters for call to function HalLcdWriteString
   \   0001E5   7902         MOV     R1,#0x2
   \   0001E7   7A..         MOV     R2,#`?<Constant "CIPMUX...[ok].">` & 0xff
   \   0001E9   7B..         MOV     R3,#(`?<Constant "CIPMUX...[ok].">` >> 8) & 0xff
   \   0001EB   12....       LCALL   ??HalLcdWriteString?relay
    732                               HalUARTWrite(UART0, "AT+CIPSERVER=1,33333\r\n", 21);
   \   0001EE                ; Setup parameters for call to function HalUARTWrite
   \   0001EE   7C15         MOV     R4,#0x15
   \   0001F0   7D00         MOV     R5,#0x0
   \   0001F2   7A..         MOV     R2,#`?<Constant "AT+CIPSERVER=1,33333\\r\\n">` & 0xff
   \   0001F4   7B..         MOV     R3,#(`?<Constant "AT+CIPSERVER=1,33333\\r\\n">` >> 8) & 0xff
   \   0001F6   12....       LCALL   ?Subroutine3 & 0xFFFF
    733                               Delay_ms(500);
    734                         
    735                               tasksteps = STEP3;
    736                             }
   \                     ??CrossCallReturnLabel_1:
   \   0001F9   7402         MOV     A,#0x2
   \                     ??SerialApp_Send_13:
   \   0001FB   F0           MOVX    @DPTR,A
   \   0001FC   806D         SJMP    ??SerialApp_Send_14
    737                             else if(tasksteps == STEP3)
   \                     ??SerialApp_Send_12:
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   6402         XRL     A,#0x2
   \   000201   7068         JNZ     ??SerialApp_Send_14
    738                             {
    739                                HalLcdWriteString( "Init Server.[ok]", HAL_LCD_LINE_2 );
   \   000203                ; Setup parameters for call to function HalLcdWriteString
   \   000203   7902         MOV     R1,#0x2
   \   000205   7A..         MOV     R2,#`?<Constant "Init Server.[ok]">` & 0xff
   \   000207   7B..         MOV     R3,#(`?<Constant "Init Server.[ok]">` >> 8) & 0xff
   \   000209   12....       LCALL   ??HalLcdWriteString?relay
    740                                
    741                                 tasksteps = STEP4;                                 
   \   00020C   90....       MOV     DPTR,#tasksteps
   \   00020F   7403         MOV     A,#0x3
   \   000211   80E8         SJMP    ??SerialApp_Send_13
    742                             }
    743                        /*     else if((strstr(SerialApp_TxBuf,"Link")!=NULL))
    744                             {
    745                                HalLcdWriteString( "Link [ok]..", HAL_LCD_LINE_3 );
    746                             } */
    747                             
    748                        }
    749                        else if(strstr(&SerialApp_TxBuf[1],">")!=NULL)
                                              ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??SerialApp_Send_11:
   \   000213                ; Setup parameters for call to function strstr
   \   000213   7C..         MOV     R4,#`?<Constant ">">` & 0xff
   \   000215   7D..         MOV     R5,#(`?<Constant ">">` >> 8) & 0xff
   \   000217   7A..         MOV     R2,#(SerialApp_TxBuf + 1) & 0xff
   \   000219   7B..         MOV     R3,#((SerialApp_TxBuf + 1) >> 8) & 0xff
   \   00021B   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00021E   6028         JZ      ??SerialApp_Send_15
    750                        {
    751                          osal_memset(SerialApp_TxBuf,0x00,31);
   \   000220                ; Setup parameters for call to function osal_memset
   \   000220   7C1F         MOV     R4,#0x1f
   \   000222   7D00         MOV     R5,#0x0
   \   000224   7900         MOV     R1,#0x0
   \   000226   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000228   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00022A   12....       LCALL   ??osal_memset?relay
    752                          if(flag==0x01)
   \   00022D   90....       MOV     DPTR,#flag
   \   000230   E0           MOVX    A,@DPTR
   \   000231   6401         XRL     A,#0x1
   \   000233   7036         JNZ     ??SerialApp_Send_14
    753                          {
    754            /*               if(cmd[3]==0x02) //²éÑ¯µ¥¸öÖÕ¶Ë
    755                           {
    756                            HalUARTWrite(UART0, Data_Report, 10);//·¢ËÍ²É¼¯µÄÊı¾İ
    757                            Delay_ms(500);
    758                            flag=0x00;
    759                           }
    760                           else if(cmd[3]==0x01) //²éÑ¯ËùÓĞÖÕ¶Ë
    761                           {
    762                             
    763                           }
    764                           
    765            */
    766                          
    767                            
    768                             SendData(adr, fc);
   \   000235                ; Setup parameters for call to function SendData
   \   000235   90....       MOV     DPTR,#fc
   \   000238   E0           MOVX    A,@DPTR
   \   000239   FA           MOV     R2,A
   \   00023A   90....       MOV     DPTR,#adr
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   F9           MOV     R1,A
   \   00023F   12....       LCALL   ??SendData?relay
    769                             flag=0x00;
   \   000242   90....       MOV     DPTR,#flag
   \   000245   E4           CLR     A
   \   000246   80B3         SJMP    ??SerialApp_Send_13
    770                             
    771                          }
    772                          
    773                        }
    774                        else if((strstr(SerialApp_TxBuf,"Link")!=NULL))
                                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??SerialApp_Send_15:
   \   000248                ; Setup parameters for call to function strstr
   \   000248   7C..         MOV     R4,#`?<Constant "Link">` & 0xff
   \   00024A   7D..         MOV     R5,#(`?<Constant "Link">` >> 8) & 0xff
   \   00024C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00024F   6008         JZ      ??SerialApp_Send_16
    775                        {
    776                             HalLcdWriteString( "Link [ok]..", HAL_LCD_LINE_3 );
   \   000251                ; Setup parameters for call to function HalLcdWriteString
   \   000251   7903         MOV     R1,#0x3
   \   000253   7A..         MOV     R2,#`?<Constant "Link [ok]..">` & 0xff
   \   000255   7B..         MOV     R3,#(`?<Constant "Link [ok]..">` >> 8) & 0xff
   \   000257   800F         SJMP    ??SerialApp_Send_9
    777                        } 
    778                        else if((strstr(SerialApp_TxBuf,"UnLink")!=NULL))
                                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

      uint8  addr, FC;
             ^
"E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",631  Warning[Pe177]: 
          variable "addr" was declared but never referenced

      uint8  addr, FC;
                   ^
"E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",631  Warning[Pe177]: 
          variable "FC" was declared but never referenced
   \                     ??SerialApp_Send_16:
   \   000259                ; Setup parameters for call to function strstr
   \   000259   7C..         MOV     R4,#`?<Constant "UnLink">` & 0xff
   \   00025B   7D..         MOV     R5,#(`?<Constant "UnLink">` >> 8) & 0xff
   \   00025D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000260   6009         JZ      ??SerialApp_Send_14
    779                        {
    780                             HalLcdWriteString( "UnLink ..", HAL_LCD_LINE_3 );
   \   000262                ; Setup parameters for call to function HalLcdWriteString
   \   000262   7903         MOV     R1,#0x3
   \   000264   7A..         MOV     R2,#`?<Constant "UnLink ..">` & 0xff
   \   000266   7B..         MOV     R3,#(`?<Constant "UnLink ..">` >> 8) & 0xff
   \                     ??SerialApp_Send_9:
   \   000268   12....       LCALL   ??HalLcdWriteString?relay
    781                         } 
    782                       
    783                         osal_memset(tmpbuf,0x00,31);
   \                     ??SerialApp_Send_14:
   \   00026B                ; Setup parameters for call to function osal_memset
   \   00026B   7C1F         MOV     R4,#0x1f
   \   00026D   7D00         MOV     R5,#0x0
   \   00026F   7900         MOV     R1,#0x0
   \   000271   758203       MOV     DPL,#0x3
   \   000274   758301       MOV     DPH,#0x1
   \   000277   12....       LCALL   ?XSTACK_DISP0_16
   \   00027A   AA82         MOV     R2,DPL
   \   00027C   AB83         MOV     R3,DPH
   \   00027E   12....       LCALL   ??osal_memset?relay
    784                        
    785                         osal_memset(SerialApp_TxBuf,0x00,31);            
   \   000281                ; Setup parameters for call to function osal_memset
   \   000281   7C1F         MOV     R4,#0x1f
   \   000283   7D00         MOV     R5,#0x0
   \   000285   7900         MOV     R1,#0x0
   \   000287   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000289   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   00028B   12....       LCALL   ??osal_memset?relay
    786                       
    787                         len=0;
    788                         SerialApp_TxLen = 0;  
   \   00028E   90....       MOV     DPTR,#SerialApp_TxLen
   \   000291   E4           CLR     A
   \   000292   F0           MOVX    @DPTR,A
    789           //////////////////////////***********************/////////////////////////////////////////////           
    790                  }
    791              }
    792          #endif
    793          }
   \                     ??SerialApp_Send_0:
   \   000293   758203       MOV     DPL,#0x3
   \   000296   758302       MOV     DPH,#0x2
   \   000299   12....       LCALL   ?ADD_XSTACK_DISP0_16
   \   00029C   7F07         MOV     R7,#0x7
   \   00029E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000002   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine14_0
   \   000004                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   12....       LCALL   ??strstr?relay
   \   000003   8B..         MOV     ?V0 + 1,R3
   \   000005   EA           MOV     A,R2
   \   000006   45..         ORL     A,?V0 + 1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    794          
    795          /*********************************************************************
    796          * @fn      SerialApp_Resp
    797          *
    798          * @brief   Send data OTA.
    799          *
    800          * @param   none
    801          *
    802          * @return  none
    803          */
    804          static void SerialApp_Resp(void)
    805          {
    806          	if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
    807          		(endPointDesc_t *)&SerialApp_epDesc,
    808          		SERIALAPP_CLUSTERID2,
    809          		SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
    810          		&SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
    811          	{
    812          		osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
    813          	}
    814          }
    815          
    816          /*********************************************************************
    817          * @fn      SerialApp_CallBack
    818          *
    819          * @brief   Send data OTA.
    820          *
    821          * @param   port - UART port.
    822          * @param   event - the UART port event flag.
    823          *
    824          * @return  none
    825          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    826          static void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    827          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    828          	(void)port;
    829          	
    830          	if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    831          #if SERIAL_APP_LOOPBACK
    832          		(SerialApp_TxLen < SERIAL_APP_TX_MAX))
    833          #else
    834          		!SerialApp_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   5E           ANL     A,R6
   \   00000A   6009         JZ      ??SerialApp_CallBack_0
   \   00000C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7003         JNZ     ??SerialApp_CallBack_0
    835          #endif
    836          	{
    837                    	
    838          	SerialApp_Send();
   \   000012                ; Setup parameters for call to function SerialApp_Send
   \   000012   12....       LCALL   ??SerialApp_Send?relay
    839                            
    840                  }      
    841                    
    842                    
    843          	
    844          }
   \                     ??SerialApp_CallBack_0:
   \   000015   02....       LJMP    ?Subroutine0 & 0xFFFF
    845          
    846          
    847          //------------------------------------------------------------------------------------------------------------------------------------------
    848          //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓĞ´«¸ĞÆ÷µÄÊı¾İ 3A 00 01 02 XX 23  ÏìÓ¦£º3A 00 01 02 00 00 00 00 xor 23

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7A..         MOV     R2,#SerialApp_TxAddr & 0xff
   \   000002   7B..         MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine15_0
   \   000004                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    849          void SerialApp_SendPeriodicMessage( void )
   \                     SerialApp_SendPeriodicMessage:
    850          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    851              uint8 SendBuf[11]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>_4`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>_4` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   740B         MOV     A,#0xb
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    852              
    853              SendBuf[0] = 0x3A;                          
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   743A         MOV     A,#0x3a
   \   00002B   F0           MOVX    @DPTR,A
    854              SendBuf[1] = HI_UINT16( EndDeviceID );
   \   00002C   90....       MOV     DPTR,#EndDeviceID + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   C0E0         PUSH    A
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    855              SendBuf[2] = LO_UINT16( EndDeviceID );
   \   00003A   90....       MOV     DPTR,#EndDeviceID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    856              SendBuf[3] = 0x02;                       //FC
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7402         MOV     A,#0x2
   \   00004F   F0           MOVX    @DPTR,A
    857              
    858              DHT11();                //»ñÈ¡ÎÂÊª¶È
   \   000050                ; Setup parameters for call to function DHT11
   \   000050   12....       LCALL   ??DHT11?relay
    859              SendBuf[4] = wendu;  
   \   000053   90....       MOV     DPTR,#wendu
   \   000056   E0           MOVX    A,@DPTR
   \   000057   C0E0         PUSH    A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    860              SendBuf[5] = shidu;  
   \   000061   90....       MOV     DPTR,#shidu
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C0E0         PUSH    A
   \   000067   7405         MOV     A,#0x5
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
    861              SendBuf[6] = GetGas();  //»ñÈ¡ÆøÌå´«¸ĞÆ÷µÄ×´Ì¬  
   \   00006F   A285         MOV     C,0x80.5
   \   000071   E4           CLR     A
   \   000072   33           RLC     A
   \   000073   C0E0         PUSH    A
   \   000075   7406         MOV     A,#0x6
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
    862              SendBuf[7] = GetLamp(); //»ñµÃµÆµÄ×´Ì¬
   \   00007D   A284         MOV     C,0x80.4
   \   00007F   4004         JC      ??SerialApp_SendPeriodicMessage_0
   \   000081   D2F0         SETB    B.0
   \   000083   8002         SJMP    ??SerialApp_SendPeriodicMessage_1
   \                     ??SerialApp_SendPeriodicMessage_0:
   \   000085   C2F0         CLR     B.0
   \                     ??SerialApp_SendPeriodicMessage_1:
   \   000087   A2F0         MOV     C,B.0
   \   000089   E4           CLR     A
   \   00008A   33           RLC     A
   \   00008B   C0E0         PUSH    A
   \   00008D   7407         MOV     A,#0x7
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   D0E0         POP     A
   \   000094   F0           MOVX    @DPTR,A
    863              SendBuf[8] = XorCheckSum(SendBuf, 9);
   \   000095                ; Setup parameters for call to function XorCheckSum
   \   000095   7909         MOV     R1,#0x9
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   AA82         MOV     R2,DPL
   \   00009F   AB83         MOV     R3,DPH
   \   0000A1   12....       LCALL   ??XorCheckSum?relay
   \   0000A4   7408         MOV     A,#0x8
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E9           MOV     A,R1
   \   0000AA   F0           MOVX    @DPTR,A
    864              SendBuf[9] = 0x23;
   \   0000AB   7409         MOV     A,#0x9
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   7423         MOV     A,#0x23
   \   0000B2   F0           MOVX    @DPTR,A
    865            
    866              SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   0000B3   12....       LCALL   ?Subroutine4 & 0xFFFF
    867              SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    868              SerialApp_TxAddr.addr.shortAddr = 0x00;  
    869              if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    870                         SERIALAPP_CLUSTERID,
    871                         10,
    872                         SendBuf,
    873                         &SerialApp_MsgID, 
    874                         0, 
    875                         AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   0000B6                ; Setup parameters for call to function AF_DataRequest
   \   0000B6   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   75....       MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
   \   0000C1   75....       MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
   \   0000C4   78..         MOV     R0,#?V0 + 0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   8582..       MOV     ?V0 + 0,DPL
   \   0000D1   8583..       MOV     ?V0 + 1,DPH
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   75..0A       MOV     ?V0 + 0,#0xa
   \   0000DC   75..00       MOV     ?V0 + 1,#0x0
   \   0000DF   78..         MOV     R0,#?V0 + 0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   75..01       MOV     ?V0 + 0,#0x1
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   7900         MOV     R1,#0x0
   \   0000EE   7C..         MOV     R4,#SerialApp_epDesc & 0xff
   \   0000F0   7D..         MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
   \   0000F2   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
    876              {
    877              // Successfully requested to be sent.
    878              }
    879              else
    880              {
    881              // Error occurred in request to send.
    882              }
    883          }
   \   0000F8   740B         MOV     A,#0xb
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FD                REQUIRE ?Subroutine2
   \   0000FD                REQUIRE _A_P0
   \   0000FD                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#SerialApp_TxAddr + 8
   \   000003   7402         MOV     A,#0x2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   740B         MOV     A,#0xb
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#SerialApp_TxAddr
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET
    884          
    885          
    886          
    887          //Í¨¹ı´®¿ÚÊä³ö¶ÌµØÖ· IEEE
    888          void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
                      ^
Warning[Pe177]: function "PrintAddrInfo" was declared but never referenced
    889          {
    890              uint8 strIeeeAddr[17] = {0};
    891              char  buff[30] = {0};    
    892              
    893              //»ñµÃ¶ÌµØÖ·   
    894              sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
    895           
    896              //»ñµÃIEEEµØÖ·
    897              GetIeeeAddr(pIeeeAddr, strIeeeAddr);
    898          //cici
    899              #if UART_DEBUG
    900              HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
    901              Delay_ms(10);
    902              HalUARTWrite (UART0, strIeeeAddr, 16); 
    903              HalUARTWrite (UART0, "\n", 1);
    904          #endif  
    905          }
    906          
    907          void AfSendAddrInfo(void)
    908          {
    909              uint16 shortAddr;
    910              uint8 strBuf[11]={0};  
    911              
    912              SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
    913              SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
    914              SerialApp_TxAddr.addr.shortAddr = 0x00;   
    915              
    916              shortAddr=NLME_GetShortAddr();
    917              
    918              strBuf[0] = 0x3B;                          //·¢ËÍµØÖ·¸øĞ­µ÷Æ÷ ¿ÉÓÃÓÚµã²¥
    919              strBuf[1] = HI_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·¸ß8Î»
    920              strBuf[2] = LO_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·µÍ8Î»
    921              
    922              osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
    923                  
    924             if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
    925                                 SERIALAPP_CLUSTERID,
    926                                 11,
    927                                 strBuf,
    928                                 &SerialApp_MsgID, 
    929                                 0, 
    930                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    931            {
    932            }
    933            else
    934            {
    935              // Error occurred in request to send.
    936            }   
    937          }
    938          
    939          void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
    940          {
    941            uint8 i;
    942            uint8 *xad = pIeeeAddr;
    943          
    944            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    945            {
    946              uint8 ch;
    947              ch = (*xad >> 4) & 0x0F;
    948              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    949              i++;
    950              ch = *xad & 0x0F;
    951              *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
    952              i++;
    953            }
    954          }
    955          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    956          uint8 XorCheckSum(uint8 * pBuf, uint8 len)
   \                     XorCheckSum:
    957          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    958          	uint8 i;
    959          	uint8 byRet=0;
    960          
    961          	if(len == 0)
   \   000007   7004         JNZ     ??XorCheckSum_0
    962          		return byRet;
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8020         SJMP    ??XorCheckSum_1
    963          	else
    964          		byRet = pBuf[0];
   \                     ??XorCheckSum_0:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
    965          
    966          	for(i = 1; i < len; i ++)
   \   000013   7801         MOV     R0,#0x1
   \   000015   8011         SJMP    ??XorCheckSum_2
    967          		byRet = byRet ^ pBuf[i];
   \                     ??XorCheckSum_3:
   \   000017   88..         MOV     ?V0 + 0,R0
   \   000019   EA           MOV     A,R2
   \   00001A   25..         ADD     A,?V0 + 0
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F583         MOV     DPH,A
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   69           XRL     A,R1
   \   000026   F9           MOV     R1,A
   \   000027   08           INC     R0
   \                     ??XorCheckSum_2:
   \   000028   E8           MOV     A,R0
   \   000029   C3           CLR     C
   \   00002A   9C           SUBB    A,R4
   \   00002B   40EA         JC      ??XorCheckSum_3
    968          
    969          	return byRet;
   \                     ??XorCheckSum_1:
   \   00002D   80..         SJMP    ?Subroutine2
    970          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Init_Wifi?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Init_Wifi

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initUART0?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUART0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_ProcessMSGCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_ProcessMSGCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??XorCheckSum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    XorCheckSum

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "initwifi">`:
   \   000000   696E6974     DB "initwifi"
   \            77696669
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SerialApp">`:
   \   000000   53657269     DB "SerialApp"
   \            616C4170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000041   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000049   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000051   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000059   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000061   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000069   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000071   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000079   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000081   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000089   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000091   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000099   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F9   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_3`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000039   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000041   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000049   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000051   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000059   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000061   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000069   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000071   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000079   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000081   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000089   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000091   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000099   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000A9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000B9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000C9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000D9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000E9   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F1   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   0000F9   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+IPD">`:
   \   000000   2B495044     DB "+IPD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%*[^,]%*c%*[^,]%*c%[^...">`:
   \   000000   252A5B5E     DB "%*[^,]%*c%*[^,]%*c%[^:]%*c%s]"
   \            2C5D252A
   \            63252A5B
   \            5E2C5D25
   \            2A63255B
   \            5E3A5D25
   \            2A632573
   \            5D00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "cmd ready....">`:
   \   000000   636D6420     DB "cmd ready...."
   \            72656164
   \            792E2E2E
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "cmd send[ok]....">`:
   \   000000   636D6420     DB "cmd send[ok]...."
   \            73656E64
   \            5B6F6B5D
   \            2E2E2E2E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,10\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,10\015\012"
   \            49505345
   \            4E443D30
   \            2C31300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,22\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,22\015\012"
   \            49505345
   \            4E443D30
   \            2C32320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "wait cmd....">`:
   \   000000   77616974     DB "wait cmd...."
   \            20636D64
   \            2E2E2E2E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "no change">`:
   \   000000   6E6F2063     DB "no change"
   \            68616E67
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CIPMUX...[ok].">`:
   \   000000   4349504D     DB "CIPMUX...[ok]."
   \            55582E2E
   \            2E5B6F6B
   \            5D2E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,33333\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,33333\015\012"
   \            49505345
   \            52564552
   \            3D312C33
   \            33333333
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Init Server.[ok]">`:
   \   000000   496E6974     DB "Init Server.[ok]"
   \            20536572
   \            7665722E
   \            5B6F6B5D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Link">`:
   \   000000   4C696E6B     DB "Link"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Link [ok]..">`:
   \   000000   4C696E6B     DB "Link [ok].."
   \            205B6F6B
   \            5D2E2E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnLink">`:
   \   000000   556E4C69     DB "UnLink"
   \            6E6B00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnLink ..">`:
   \   000000   556E4C69     DB "UnLink .."
   \            6E6B202E
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_4`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_5`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0
    971          
    972          uint8 GetDataLen(uint8 fc)
                       ^
Warning[Pe177]: function "GetDataLen" was declared but never referenced

      uint8 tmpbuf[256]={0};
            ^
"E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",637  Warning[Ta010]: 
          Write to a __constptr pointer

      uint8 cmd[256]={0};
            ^
"E:\c\zigbeeÍø¹Ø¿ª·¢°å\´úÂë¼°Æä½Ì³Ì\6.ÖÕ½áÆª-ZigBeeÍø¹Ø´øĞ­ÒéÕ»²É¼¯¿ØÖÆ\WiFi_ZigBee\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c",638  Warning[Ta010]: 
          Write to a __constptr pointer
    973          {
    974              uint8 len=0;
    975              switch(fc)
    976              {
    977              case 0x0A:
    978              case 0x0B:
    979              case 0x0C:
    980              case 0x0D:
    981                len = 1;
    982                break;
    983              }
    984              
    985              return len;
    986          }
    987          
    988          
    989          //»ñµÃP0_4 ¼ÌµçÆ÷Òı½ÅµÄµçÆ½
    990          uint8 GetLamp( void )
    991          {
    992            uint8 ret;
    993            
    994            if(LAMP_PIN == 0)
    995              ret = 1;
    996            else
    997              ret = 0;
    998            
    999            return ret;
   1000          }
   1001          
   1002          //»ñµÃP0_5 MQ-2ÆøÌå´«¸ĞÆ÷µÄÊı¾İ
   1003          uint8 GetGas( void )
   1004          {
   1005            uint8 ret;
   1006            
   1007            if(GAS_PIN == 0)
   1008              ret = 0;
   1009            else
   1010              ret = 1;
   1011            
   1012            return ret;
   1013          }
   1014          
   1015          //-------------------------------------------------------------------
   1016          
   1017          
   1018          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Init_Wifi                          2      0      0
       -> HalLcdWriteString             4      0      0
       -> HalUARTWrite                  4      0      0
       -> Delay_ms                      4      0      0
     SendData                           1      0    549
       -> osal_memset                   0      0     32
       -> osal_memcpy                   0      0     38
       -> XorCheckSum                   0      0     32
       -> HalUARTWrite                  0      0     32
       -> osal_memcpy                   0      0     38
       -> XorCheckSum                   0      0     32
       -> HalUARTWrite                  0      0     32
     SerialApp_CallBack                 0      0      9
       -> SerialApp_Send                0      0     18
     SerialApp_HandleKeys               0      0     57
       -> HalLedSet                     0      0     42
       -> osal_start_timerEx            0      0     42
       -> HalLedSet                     0      0     42
       -> osal_stop_timerEx             0      0     42
       -> HalLedSet                     0      0     42
       -> NLME_GetShortAddr             0      0     60
       -> ZDP_EndDeviceBindReq          0      0     60
       -> HalLedSet                     0      0     42
       -> ZDP_MatchDescReq              0      0     58
     SerialApp_Init                     0      0     38
       -> afRegister                    0      0     76
       -> RegisterForKeys               0      0     76
       -> HalUARTOpen                   0      0     76
       -> initUART0                     0      0     76
       -> HalLcdWriteString             0      0     76
       -> ZDO_RegisterForZDOMsg         0      0     76
       -> ZDO_RegisterForZDOMsg         0      0     76
       -> osal_start_timerEx            0      0     76
     SerialApp_ProcessEvent             2      0     36
       -> SerialApp_SendPeriodicMessage
                                        0      0     54
       -> osal_rand                     0      0     54
       -> osal_start_timerEx            0      0     54
       -> NLME_GetShortAddr             0      0     54
       -> NLME_GetExtAddr               0      0     54
       -> osal_memcpy                   0      0     60
       -> AF_DataRequest                0      0     72
       -> osal_msg_deallocate           0      0     54
       -> osal_msg_receive              0      0     54
       -> SerialApp_HandleKeys          0      0     54
       -> SerialApp_ProcessMSGCmd       0      0     54
       -> SerialApp_Send                0      0     54
       -> AF_DataRequest                0      0     72
       -> osal_set_event                0      0     54
     SerialApp_ProcessMSGCmd            2      0     71
       -> osal_memcpy                   0      0     88
       -> HalUARTWrite                  0      0     82
       -> osal_stop_timerEx             0      0     82
       -> osal_start_timerEx            0      0     82
     SerialApp_Send                     2      0    566
       -> HalUARTRead                   0      0   1060
       -> strstr                        0      0   1060
       -> sscanf                        0      0   1068
       -> atoi                          0      0   1060
       -> osal_memcpy                   0      0   1066
       -> HalLcdWriteString             0      0   1060
       -> AF_DataRequest                0      0   1078
       -> Delay_ms                      0      0   1060
       -> HalLcdWriteString             0      0   1060
       -> HalUARTWrite                  0      0   1060
       -> HalUARTWrite                  0      0   1060
       -> HalLcdWriteString             0      0   1060
       -> strstr                        0      0   1060
       -> strstr                        0      0   1060
       -> HalLcdWriteString             0      0   1060
       -> HalUARTWrite                  0      0   1060
       -> Delay_ms                      0      0   1060
       -> HalLcdWriteString             0      0   1060
       -> strstr                        0      0   1060
       -> osal_memset                   0      0   1060
       -> SendData                      0      0   1060
       -> strstr                        0      0   1060
       -> HalLcdWriteString             0      0   1060
       -> strstr                        0      0   1060
       -> HalLcdWriteString             0      0   1060
       -> osal_memset                   0      0   1060
       -> osal_memset                   0      0   1060
     SerialApp_SendPeriodicMessage      2      0     57
       -> DHT11                         0      0     42
       -> XorCheckSum                   0      0     42
       -> AF_DataRequest                0      0     60
     XorCheckSum                        0      0     31
     initUART0                          0      0     38


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     _A_P0                                     1
     U0CSR                                     1
     CLKCONSTA                                 1
     _A_IEN0                                   1
     U0BAUD                                    1
     U0GCR                                     1
     CLKCONCMD                                 1
     _A_IRCON2                                 1
     PERCFG                                    1
     P0SEL                                     1
     P0DIR                                     1
     P2DIR                                     1
     EndDeviceID                               2
     tempRX                                    1
     Recdata                                 128
     tasksteps                                 1
     adr                                       1
     fc                                        1
     Data_Report                              30
     flag                                      1
     SerialApp_ClusterList                     4
     SerialApp_SimpleDesc                     12
     SerialApp_epDesc                          6
     SerialApp_TaskID                          1
     SendFlag                                  1
     Broadcast_DstAddr                        12
     SerialApp_TxSeq                           1
     SerialApp_TxBuf                          41
     SerialApp_TxLen                           1
     SerialApp_RxAddr                         12
     SerialApp_RspBuf                          4
     SerialApp_NwkState                        1
     SerialApp_TxAddr                         12
     SerialApp_MsgID                           1
     NodeData                                 20
     Init_Wifi                                34
     ?Subroutine3                             16
     initUART0                                41
     SerialApp_Init                          183
     ?Subroutine0                              5
     ?Subroutine7                              4
     ??Subroutine11_0                          2
     ??Subroutine12_0                         11
     ?Subroutine5                              8
     SerialApp_ProcessEvent                  421
     ?Subroutine1                              5
     SerialApp_HandleKeys                    266
     SerialApp_ProcessMSGCmd                 286
     ?Subroutine8                             12
     ?Subroutine6                              4
     ??Subroutine13_0                          6
     TxBuffer                                128
     SendData                                243
     SerialApp_Send                          673
     ?Subroutine10                             4
     ??Subroutine14_0                          9
     ??Subroutine15_0                          6
     SerialApp_CallBack                       24
     ?Subroutine9                              4
     SerialApp_SendPeriodicMessage           253
     ?Subroutine2                              5
     ?Subroutine4                             18
     XorCheckSum                              47
     ?<Initializer for EndDeviceID>            2
     ??Init_Wifi?relay                         6
     ??initUART0?relay                         6
     ??SerialApp_Init?relay                    6
     ??SerialApp_ProcessEvent?relay            6
     ??SerialApp_HandleKeys?relay              6
     ??SerialApp_ProcessMSGCmd?relay           6
     ??SendData?relay                          6
     ??SerialApp_Send?relay                    6
     ??SerialApp_CallBack?relay                6
     ??SerialApp_SendPeriodicMessage?relay     6
     ??XorCheckSum?relay                       6
     ?<Constant "initwifi">                    9
     ?<Constant "AT+CIPMUX=1\r\n">            14
     ?<Constant "SerialApp">                  10
     ?<Constant {0}>                          30
     ?<Constant {0}>_1                         3
     ?<Constant {0}>_2                       256
     ?<Constant {0}>_3                       256
     ?<Constant "+IPD">                        5
     ?<Constant "%*[^,]%*c%*[^,]%*c%[^...">   30
     ?<Constant "cmd ready....">              14
     ?<Constant "cmd send[ok]....">           17
     ?<Constant "AT+CIPSEND=0,10\r\n">        18
     ?<Constant "AT+CIPSEND=0,22\r\n">        18
     ?<Constant "wait cmd....">               13
     ?<Constant "OK">                          3
     ?<Constant "no change">                  10
     ?<Constant "CIPMUX...[ok].">             15
     ?<Constant "AT+CIPSERVER=1,33333\r\n">   23
     ?<Constant "Init Server.[ok]">           17
     ?<Constant ">">                           2
     ?<Constant "Link">                        5
     ?<Constant "Link [ok]..">                12
     ?<Constant "UnLink">                      7
     ?<Constant "UnLink ..">                  10
     ?<Constant {0}>_4                        11
     ?<Constant {0}>_5                        11

 
 2 590 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    12 bytes in segment SFR_AN
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   841 bytes in segment XDATA_ROM_C
   398 bytes in segment XDATA_Z
 
 2 658 bytes of CODE  memory
   841 bytes of CONST memory
     0 bytes of DATA  memory (+ 12 bytes shared)
   400 bytes of XDATA memory

Errors: none
Warnings: 15
